inc/Asm86.h line 0015: Duplicate label: (MUL_HL)
inc/Asm86.h line 0017: Duplicate label: (CP_HL_DE)
inc/Asm86.h line 0018: Duplicate label: (LD_HL_MHL)
inc/Asm86.h line 0019: Duplicate label: (GET_KEY)
inc/Asm86.h line 0020: Duplicate label: (UNPACK_HL)
inc/Asm86.h line 0022: Duplicate label: (D_HL_DECI)
inc/Asm86.h line 0024: Duplicate label: (BUSY_OFF)
inc/Asm86.h line 0025: Duplicate label: (BUSY_ON)
inc/Asm86.h line 0026: Duplicate label: (D_ZT_STR)
inc/Asm86.h line 0027: Duplicate label: (D_LT_STR)
inc/Asm86.h line 0028: Duplicate label: (TX_CHARPUT)
inc/Asm86.h line 0029: Duplicate label: (D_ZM_STR)
inc/Asm86.h line 0030: Duplicate label: (D_LM_STR)
inc/Asm86.h line 0031: Duplicate label: (M_CHARPUT)
inc/Asm86.h line 0032: Duplicate label: (CLEARLCD)
inc/Asm86.h line 0040: Duplicate label: (CONTRAST)
inc/Asm86.h line 0041: Duplicate label: (CURSOR_ROW)
inc/Asm86.h line 0042: Duplicate label: (CURSOR_COL)
inc/Asm86.h line 0043: Duplicate label: (BUSY_COUNTER)
inc/Asm86.h line 0044: Duplicate label: (BUSY_BITMAP)
inc/Asm86.h line 0045: Duplicate label: (TEXT_MEM)
inc/Asm86.h line 0046: Duplicate label: (CURSOR_X)
inc/Asm86.h line 0047: Duplicate label: (CURSOR_Y)
inc/Asm86.h line 0048: Duplicate label: (GRAPH_MEM)
inc/Asm86.h line 0049: Duplicate label: (TEXT_MEM2)
inc/Asm86.h line 0050: Duplicate label: (VAT_END)
inc/Asm86.h line 0051: Duplicate label: (VAT_START)
inc/Asm86.h line 0052: Duplicate label: (VIDEO_MEM)
inc/Asm86.h line 0057: Duplicate label: (K_NOKEY)
inc/Asm86.h line 0058: Duplicate label: (K_DOWN)
inc/Asm86.h line 0059: Duplicate label: (K_LEFT)
inc/Asm86.h line 0060: Duplicate label: (K_RIGHT)
inc/Asm86.h line 0061: Duplicate label: (K_UP)
inc/Asm86.h line 0062: Duplicate label: (K_ENTER)
inc/Asm86.h line 0063: Duplicate label: (K_PLUS)
inc/Asm86.h line 0064: Duplicate label: (K_MINUS)
inc/Asm86.h line 0065: Duplicate label: (K_STAR)
inc/Asm86.h line 0066: Duplicate label: (K_SLASH)
inc/Asm86.h line 0067: Duplicate label: (K_RAISE)
inc/Asm86.h line 0068: Duplicate label: (K_CLEAR)
inc/Asm86.h line 0069: Duplicate label: (K_SIGN)
inc/Asm86.h line 0070: Duplicate label: (K_3)
inc/Asm86.h line 0071: Duplicate label: (K_6)
inc/Asm86.h line 0072: Duplicate label: (K_9)
inc/Asm86.h line 0073: Duplicate label: (K_RIGHTPAR)
inc/Asm86.h line 0074: Duplicate label: (K_TAN)
inc/Asm86.h line 0075: Duplicate label: (K_CUSTOM)
inc/Asm86.h line 0076: Duplicate label: (K_DOT)
inc/Asm86.h line 0077: Duplicate label: (K_2)
inc/Asm86.h line 0078: Duplicate label: (K_5)
inc/Asm86.h line 0079: Duplicate label: (K_8)
inc/Asm86.h line 0080: Duplicate label: (K_LEFTPAR)
inc/Asm86.h line 0081: Duplicate label: (K_COS)
inc/Asm86.h line 0082: Duplicate label: (K_PRGM)
inc/Asm86.h line 0083: Duplicate label: (K_DEL)
inc/Asm86.h line 0084: Duplicate label: (K_0)
inc/Asm86.h line 0085: Duplicate label: (K_1)
inc/Asm86.h line 0086: Duplicate label: (K_4)
inc/Asm86.h line 0087: Duplicate label: (K_7)
inc/Asm86.h line 0088: Duplicate label: (K_EE)
inc/Asm86.h line 0089: Duplicate label: (K_SIN)
inc/Asm86.h line 0090: Duplicate label: (K_TABLE)
inc/Asm86.h line 0091: Duplicate label: (K_XVAR)
inc/Asm86.h line 0092: Duplicate label: (K_ON)
inc/Asm86.h line 0093: Duplicate label: (K_STO)
inc/Asm86.h line 0094: Duplicate label: (K_COMMA)
inc/Asm86.h line 0095: Duplicate label: (K_SQUARE)
inc/Asm86.h line 0096: Duplicate label: (K_LN)
inc/Asm86.h line 0097: Duplicate label: (K_LOG)
inc/Asm86.h line 0098: Duplicate label: (K_GRAPH)
inc/Asm86.h line 0099: Duplicate label: (K_ALPHA)
inc/Asm86.h line 0100: Duplicate label: (K_F5)
inc/Asm86.h line 0101: Duplicate label: (K_F4)
inc/Asm86.h line 0102: Duplicate label: (K_F3)
inc/Asm86.h line 0103: Duplicate label: (K_F2)
inc/Asm86.h line 0104: Duplicate label: (K_F1)
inc/Asm86.h line 0105: Duplicate label: (K_SECOND)
inc/Asm86.h line 0106: Duplicate label: (K_EXIT)
inc/Asm86.h line 0107: Duplicate label: (K_MORE)
../ztetris/ZTETRIS.ASM line 1472: Duplicate label: (D_ZT_STR)
0001   0000             ;
0002   0000             ; If you make any changes to the source, please tell me what and why.
0003   0000             ; And you are NOT allowed to distribute a modified source, nor the
0004   0000             ; compiled version of it. Any changes should be made for personal use only.
0005   0000             ;
0006   0000             ; //Jimmy M†rdell <mja@algonet.se>
0007   0000             ;
0008   0000             
0009   0000             #include asm86.h
0001+  0000             ;==================================================================
0002+  0000             ;These lines are used to 'fix' TI's include files to work with TASM
0003+  0000             ;==================================================================
0004+  0000             #DEFINE equ 							=
0005+  0000             #DEFINE EQU 							=
0006+  0000             #DEFINE 0FCH							0FCh
0007+  0000             #DEFINE 0D4H							0D4h
0008+  0000             #DEFINE 0E8H    						0E8h
0009+  0000             #DEFINE 0C0H							0C0h
0010+  0000             
0011+  0000             ;====================================================================
0012+  0000             ;These are common zshell and usgard calls that are known on the TI-86
0013+  0000             ;If possible, use the call that is commented next to the one you want
0014+  0000             ;====================================================================
0015+  0000             MUL_HL = $4547
0016+  0000             
0017+  0000             CP_HL_DE = $403C
0018+  0000             LD_HL_MHL = $4010
0019+  0000             GET_KEY = $5371
0020+  0000             UNPACK_HL = $4044
0021+  0000             
0022+  0000             D_HL_DECI = $4a33
0023+  0000             
0024+  0000             BUSY_OFF = $4ab1			;_runindoff
0025+  0000             BUSY_ON = $4aad				;_runindicon
0026+  0000             D_ZT_STR = $4a37			;_puts
0027+  0000             D_LT_STR = $4a3b			;_putps
0028+  0000             TX_CHARPUT = $4a2b			;_putc
0029+  0000             D_ZM_STR = $4aa5			;_vputs
0030+  0000             D_LM_STR = $4aa9			;_vputsn
0031+  0000             M_CHARPUT = $4aa1			;_vputmap
0032+  0000             CLEARLCD = $4a7e			;_clrLCD
0033+  0000             
0034+  0000             
0035+  0000             ;========================================================
0036+  0000             ;These are memory addresses common for zshell programming
0037+  0000             ;If possible, use the one on the right
0038+  0000             ;========================================================
0039+  0000             
0040+  0000             CONTRAST = $c008			
0041+  0000             CURSOR_ROW = $c00f			;_curRow
0042+  0000             CURSOR_COL = $c010			;_curCol
0043+  0000             BUSY_COUNTER = $c087 
0044+  0000             BUSY_BITMAP	= $c088
0045+  0000             TEXT_MEM = $c0f9			;_textShadow
0046+  0000             CURSOR_X = $c37c			;_penCol
0047+  0000             CURSOR_Y = $c37d			;_penRow
0048+  0000             GRAPH_MEM = $c9fa			;_plotSScreen
0049+  0000             TEXT_MEM2 = $cfab			;_cmdShadow
0050+  0000             VAT_END = $d298
0051+  0000             VAT_START = $8000
0052+  0000             VIDEO_MEM = $fc00
0053+  0000             
0054+  0000             ;==================================================================
0055+  0000             ;all the keys are used with <call GET_KEY>, not TI's <call _getkey>
0056+  0000             ;==================================================================
0057+  0000             K_NOKEY       =$00    ;No key
0058+  0000             K_DOWN        =$01    ;Down
0059+  0000             K_LEFT        =$02    ;Left
0060+  0000             K_RIGHT       =$03    ;Right
0061+  0000             K_UP          =$04    ;Up
0062+  0000             K_ENTER       =$09    ;Enter
0063+  0000             K_PLUS        =$0A    ;+                      X
0064+  0000             K_MINUS       =$0B    ;-                      T
0065+  0000             K_STAR        =$0C    ;*                      O
0066+  0000             K_SLASH       =$0D    ;/                      J
0067+  0000             K_RAISE       =$0E    ;^                      E
0068+  0000             K_CLEAR       =$0F    ;Clear
0069+  0000             K_SIGN        =$11    ;(-)                    Space
0070+  0000             K_3           =$12    ;3                      W
0071+  0000             K_6           =$13    ;6                      S
0072+  0000             K_9           =$14    ;9                      N
0073+  0000             K_RIGHTPAR    =$15    ;)                      I
0074+  0000             K_TAN         =$16    ;Tan                    D
0075+  0000             K_CUSTOM      =$17    ;Custom
0076+  0000             K_DOT         =$19    ;.                      Z
0077+  0000             K_2           =$1A    ;2                      V
0078+  0000             K_5           =$1B    ;5                      R
0079+  0000             K_8           =$1C    ;8                      M
0080+  0000             K_LEFTPAR     =$1D    ;(                      H
0081+  0000             K_COS         =$1E    ;Cos                    C
0082+  0000             K_PRGM        =$1F    ;Prgm
0083+  0000             K_DEL         =$20    ;Del
0084+  0000             K_0           =$21    ;0                      Y
0085+  0000             K_1           =$22    ;1                      U
0086+  0000             K_4           =$23    ;4                      Q
0087+  0000             K_7           =$24    ;7                      L
0088+  0000             K_EE          =$25    ;EE                     G
0089+  0000             K_SIN         =$26    ;Sin                    B
0090+  0000             K_TABLE       =$27    ;Table		  ;Used to be Stat on the TI-85, now K_TABLE
0091+  0000             K_XVAR        =$28    ;x-Var                  x
0092+  0000             K_ON          =$29    ;On
0093+  0000             K_STO         =$2A    ;Sto                    =
0094+  0000             K_COMMA       =$2B    ;,                      P
0095+  0000             K_SQUARE      =$2C    ;x^2                    K
0096+  0000             K_LN          =$2D    ;Ln                     F
0097+  0000             K_LOG         =$2E    ;Log                    A
0098+  0000             K_GRAPH       =$2F    ;Graph
0099+  0000             K_ALPHA       =$30    ;Alpha
0100+  0000             K_F5          =$31    ;F5
0101+  0000             K_F4          =$32    ;F4
0102+  0000             K_F3          =$33    ;F3
0103+  0000             K_F2          =$34    ;F2
0104+  0000             K_F1          =$35    ;F1
0105+  0000             K_SECOND      =$36    ;2nd
0106+  0000             K_EXIT        =$37    ;EXIT
0107+  0000             K_MORE        =$38    ;MORE
0010   0000             #include ti86asm.inc
0001+  0000             ; ACZ main include file
0002+  0000             ; Assembly Coder's Zenith - http://www.acz.org
0003+  0000             ; version: January 18, 1999
0004+  0000             
0005+  0000             #include "inc/Asm86.h"	; flags, key equates...
0001++ 0000             ;==================================================================
0002++ 0000             ;These lines are used to 'fix' TI's include files to work with TASM
0003++ 0000             ;==================================================================
0004++ 0000             #DEFINE equ 							=
0005++ 0000             #DEFINE EQU 							=
0006++ 0000             #DEFINE 0FCH							0FCh
0007++ 0000             #DEFINE 0D4H							0D4h
0008++ 0000             #DEFINE 0E8H    						0E8h
0009++ 0000             #DEFINE 0C0H							0C0h
0010++ 0000             
0011++ 0000             ;====================================================================
0012++ 0000             ;These are common zshell and usgard calls that are known on the TI-86
0013++ 0000             ;If possible, use the call that is commented next to the one you want
0014++ 0000             ;====================================================================
0015++ 0000             MUL_HL = $4547
0016++ 0000             
0017++ 0000             CP_HL_DE = $403C
0018++ 0000             LD_HL_MHL = $4010
0019++ 0000             GET_KEY = $5371
0020++ 0000             UNPACK_HL = $4044
0021++ 0000             
0022++ 0000             D_HL_DECI = $4a33
0023++ 0000             
0024++ 0000             BUSY_OFF = $4ab1			;_runindoff
0025++ 0000             BUSY_ON = $4aad				;_runindicon
0026++ 0000             D_ZT_STR = $4a37			;_puts
0027++ 0000             D_LT_STR = $4a3b			;_putps
0028++ 0000             TX_CHARPUT = $4a2b			;_putc
0029++ 0000             D_ZM_STR = $4aa5			;_vputs
0030++ 0000             D_LM_STR = $4aa9			;_vputsn
0031++ 0000             M_CHARPUT = $4aa1			;_vputmap
0032++ 0000             CLEARLCD = $4a7e			;_clrLCD
0033++ 0000             
0034++ 0000             
0035++ 0000             ;========================================================
0036++ 0000             ;These are memory addresses common for zshell programming
0037++ 0000             ;If possible, use the one on the right
0038++ 0000             ;========================================================
0039++ 0000             
0040++ 0000             CONTRAST = $c008			
0041++ 0000             CURSOR_ROW = $c00f			;_curRow
0042++ 0000             CURSOR_COL = $c010			;_curCol
0043++ 0000             BUSY_COUNTER = $c087 
0044++ 0000             BUSY_BITMAP	= $c088
0045++ 0000             TEXT_MEM = $c0f9			;_textShadow
0046++ 0000             CURSOR_X = $c37c			;_penCol
0047++ 0000             CURSOR_Y = $c37d			;_penRow
0048++ 0000             GRAPH_MEM = $c9fa			;_plotSScreen
0049++ 0000             TEXT_MEM2 = $cfab			;_cmdShadow
0050++ 0000             VAT_END = $d298
0051++ 0000             VAT_START = $8000
0052++ 0000             VIDEO_MEM = $fc00
0053++ 0000             
0054++ 0000             ;==================================================================
0055++ 0000             ;all the keys are used with <call GET_KEY>, not TI's <call _getkey>
0056++ 0000             ;==================================================================
0057++ 0000             K_NOKEY       =$00    ;No key
0058++ 0000             K_DOWN        =$01    ;Down
0059++ 0000             K_LEFT        =$02    ;Left
0060++ 0000             K_RIGHT       =$03    ;Right
0061++ 0000             K_UP          =$04    ;Up
0062++ 0000             K_ENTER       =$09    ;Enter
0063++ 0000             K_PLUS        =$0A    ;+                      X
0064++ 0000             K_MINUS       =$0B    ;-                      T
0065++ 0000             K_STAR        =$0C    ;*                      O
0066++ 0000             K_SLASH       =$0D    ;/                      J
0067++ 0000             K_RAISE       =$0E    ;^                      E
0068++ 0000             K_CLEAR       =$0F    ;Clear
0069++ 0000             K_SIGN        =$11    ;(-)                    Space
0070++ 0000             K_3           =$12    ;3                      W
0071++ 0000             K_6           =$13    ;6                      S
0072++ 0000             K_9           =$14    ;9                      N
0073++ 0000             K_RIGHTPAR    =$15    ;)                      I
0074++ 0000             K_TAN         =$16    ;Tan                    D
0075++ 0000             K_CUSTOM      =$17    ;Custom
0076++ 0000             K_DOT         =$19    ;.                      Z
0077++ 0000             K_2           =$1A    ;2                      V
0078++ 0000             K_5           =$1B    ;5                      R
0079++ 0000             K_8           =$1C    ;8                      M
0080++ 0000             K_LEFTPAR     =$1D    ;(                      H
0081++ 0000             K_COS         =$1E    ;Cos                    C
0082++ 0000             K_PRGM        =$1F    ;Prgm
0083++ 0000             K_DEL         =$20    ;Del
0084++ 0000             K_0           =$21    ;0                      Y
0085++ 0000             K_1           =$22    ;1                      U
0086++ 0000             K_4           =$23    ;4                      Q
0087++ 0000             K_7           =$24    ;7                      L
0088++ 0000             K_EE          =$25    ;EE                     G
0089++ 0000             K_SIN         =$26    ;Sin                    B
0090++ 0000             K_TABLE       =$27    ;Table		  ;Used to be Stat on the TI-85, now K_TABLE
0091++ 0000             K_XVAR        =$28    ;x-Var                  x
0092++ 0000             K_ON          =$29    ;On
0093++ 0000             K_STO         =$2A    ;Sto                    =
0094++ 0000             K_COMMA       =$2B    ;,                      P
0095++ 0000             K_SQUARE      =$2C    ;x^2                    K
0096++ 0000             K_LN          =$2D    ;Ln                     F
0097++ 0000             K_LOG         =$2E    ;Log                    A
0098++ 0000             K_GRAPH       =$2F    ;Graph
0099++ 0000             K_ALPHA       =$30    ;Alpha
0100++ 0000             K_F5          =$31    ;F5
0101++ 0000             K_F4          =$32    ;F4
0102++ 0000             K_F3          =$33    ;F3
0103++ 0000             K_F2          =$34    ;F2
0104++ 0000             K_F1          =$35    ;F1
0105++ 0000             K_SECOND      =$36    ;2nd
0106++ 0000             K_EXIT        =$37    ;EXIT
0107++ 0000             K_MORE        =$38    ;MORE
0006+  0000             #include "inc/Ram86.h"	; memory locations
0001++ 0000             ; ACZ include file: RAM locations
0002++ 0000             ; Assembly Coder's Zenith - http://www.acz.org/
0003++ 0000             ; version: January 30, 1999
0004++ 0000             
0005++ 0000             _RAMStart             equ         0C000h
0006++ 0000             _kbdScanCode          equ         0C000h	; key code
0007++ 0000             _kbdLGSC              equ         0C001h
0008++ 0000             _kbdPSC               equ         0C002h	; previous scan code
0009++ 0000             _kbdWUR               equ         0C003h
0010++ 0000             _kbdDebncCnt          equ         0C004h
0011++ 0000             _kbdkey               equ         0C005h
0012++ 0000             _kbdGetKy             equ         0C006h
0013++ 0000             _keyextend            equ         0C007h
0014++ 0000             _contrast             equ         0C008h	; contrast (0-31)
0015++ 0000             _APDSubTimer          equ         0C009h	; APD sub-timer
0016++ 0000             _APDTimer             equ         0C00Ah	; APD timer
0017++ 0000             _APDWarmUp            equ         0C00Bh
0018++ 0000             _viet                 equ         0C00Ch
0019++ 0000             _curTime              equ         0C00Eh	; cursor time counter
0020++ 0000             _curRow               equ         0C00Fh	; cursor row
0021++ 0000             _curCol               equ         0C010h	; cursor column
0022++ 0000             _curUnder             equ         0C011h	; char under cursor
0023++ 0000             _undelBufLen          equ         0C012h	; undelete buffer lenght
0024++ 0000             _undelBuf             equ         0C013h	; undelete buffer
0025++ 0000             _P_tokVarPtr          equ         0C077h
0026++ 0000             _toklen               equ         0C07Ah
0027++ 0000             _TOK_B3               equ         0C07Ch
0028++ 0000             _DETOK_H3             equ         0C07Dh
0029++ 0000             _MEMPRE_H3            equ         0C07Eh
0030++ 0000             _indicMem             equ         0C07Fh
0031++ 0000             _indicCounter         equ         0C087h
0032++ 0000             _indicBusy            equ         0C088h	; busy indicator
0033++ 0000             _OP1                  equ         0C089h	; OP registers begin
0034++ 0000             _OP1EXPM              equ         0C08Ah	;
0035++ 0000             _OP1EXPL              equ         0C08Bh	;
0036++ 0000             _OP1M                 equ         0C08Ch	;
0037++ 0000             _OP1EXT               equ         0C093h	;	
0038++ 0000             _LOGKP                equ         0C094h	;
0039++ 0000             _OP2                  equ         0C094h	; op2
0040++ 0000             _OP2EXPM              equ         0C095h	;
0041++ 0000             _OP2EXPL              equ         0C096h	;
0042++ 0000             _OP2M                 equ         0C097h	;
0043++ 0000             _OP2EXT               equ         0C09Eh	;
0044++ 0000             _OP3                  equ         0C09Fh	; op3
0045++ 0000             _LOGKM                equ         0C09Fh	;
0046++ 0000             _OP3EXPM              equ         0C0A0h	;
0047++ 0000             _OP3EXPL              equ         0C0A1h	;
0048++ 0000             _OP3M                 equ         0C0A2h	;
0049++ 0000             _OP3EXT               equ         0C0A9h	;
0050++ 0000             _CORDFLG1             equ         0C0AAh	;
0051++ 0000             _OP4                  equ         0C0AAh	; op4
0052++ 0000             _OP4EXPM              equ         0C0ABh	;
0053++ 0000             _OP4EXPL              equ         0C0ACh	;
0054++ 0000             _OP4M                 equ         0C0ADh	;
0055++ 0000             _OP4EXT               equ         0C0B4h	;
0056++ 0000             _EK                   equ         0C0B5h	;
0057++ 0000             _CORDFLG              equ         0C0B5h	;
0058++ 0000             _OP5                  equ         0C0B5h	; op5
0059++ 0000             _OP5EXPM              equ         0C0B6h	;
0060++ 0000             _SF                   equ         0C0B6h	;
0061++ 0000             _EL                   equ         0C0B6h	;
0062++ 0000             _OP5EXPL              equ         0C0B7h	;
0063++ 0000             _EM                   equ         0C0B7h	;
0064++ 0000             _OP5M                 equ         0C0B8h	;
0065++ 0000             _EMM1                 equ         0C0B8h	;
0066++ 0000             _EITS                 equ         0C0B9h	;
0067++ 0000             _ENM2                 equ         0C0BAh	;
0068++ 0000             _ENA                  equ         0C0BBh	;
0069++ 0000             _EEN                  equ         0C0BCh	;
0070++ 0000             _OP5EXT               equ         0C0BFh	;
0071++ 0000             _EN                   equ         0C0C0h	;
0072++ 0000             _OP6                  equ         0C0C0h	; op6
0073++ 0000             _EJ                   equ         0C0C1h	;
0074++ 0000             _OP6EXPM              equ         0C0C1h	;
0075++ 0000             _OP6EXPL              equ         0C0C2h	;
0076++ 0000             _EEI                  equ         0C0C2h	;
0077++ 0000             _OP6M                 equ         0C0C3h	;
0078++ 0000             _ELOW                 equ         0C0C5h	;
0079++ 0000             _EIGH                 equ         0C0C6h	;
0080++ 0000             _OP6EXT               equ         0C0CAh	; OP registers end
0081++ 0000             _OP7                  equ         0C0CCh	;
0082++ 0000             _CPLXTRG              equ         0C0D7h
0083++ 0000             _IOFLAG               equ         0C0D7h
0084++ 0000             _P_IMATHPTR1          equ         0C0D8h
0085++ 0000             _P_IMATHPTR2          equ         0C0DBh
0086++ 0000             _P_IMATHPTR3          equ         0C0DEh
0087++ 0000             _P_IMATHPTR4          equ         0C0E1h
0088++ 0000             _P_IMATHPTR5          equ         0C0E4h
0089++ 0000             _CHKDELPTR1           equ         0C0E7h
0090++ 0000             _P_CHKDELPTR1         equ         0C0E7h
0091++ 0000             _P_CHKDELPTR2         equ         0C0EAh
0092++ 0000             _P_INSDELPTR          equ         0C0EDh
0093++ 0000             _P_UPDOWNPTR          equ         0C0F0h
0094++ 0000             _STDRNGSGN            equ         0C0F3h
0095++ 0000             _POLRNGSGN            equ         0C0F4h
0096++ 0000             _PARRNGSGN            equ         0C0F5h
0097++ 0000             _DIFRNDSGN            equ         0C0F6h
0098++ 0000             _USRRNGSGN            equ         0C0F7h
0099++ 0000             _STATSGN              equ         0C0F8h
0100++ 0000             _textShadow           equ         0C0F9h	; text mem
0101++ 0000             _textShadCur          equ         0C1A1h	; _textShadow's cursors
0102++ 0000             _textShadTop          equ         0C1A3h	;
0103++ 0000             _textShadAlph         equ         0C1A4h	;
0104++ 0000             _textShadIns          equ         0C1A5h	;
0105++ 0000             _textAccent           equ         0C1A6h
0106++ 0000             _cxMain               equ         0C1A7h
0107++ 0000             _cxPPutAway           equ         0C1A9h
0108++ 0000             _cxPutAway            equ         0C1ABh
0109++ 0000             _cxRedisp             equ         0C1ADh
0110++ 0000             _cxErrorEP            equ         0C1AFh
0111++ 0000             _cxSizeWind           equ         0C1B1h
0112++ 0000             _cxPage               equ         0C1B3h
0113++ 0000             _CXCURAPP             equ         0C1B4h	; current calc state
0114++ 0000             _cxPrev               equ         0C1B5h
0115++ 0000             _monQH                equ         0C1C4h
0116++ 0000             _monQT                equ         0C1C5h
0117++ 0000             _monQueue             equ         0C1C6h
0118++ 0000             _onSP                 equ         0C1D6h
0119++ 0000             _onCheckSum           equ         0C1D8h
0120++ 0000             _promptRow            equ         0C1DAh
0121++ 0000             _promptCol            equ         0C1DBh
0122++ 0000             _promptIns            equ         0C1DCh
0123++ 0000             _promptShift          equ         0C1DDh
0124++ 0000             _promptRet            equ         0C1DEh
0125++ 0000             _promptValid          equ         0C1E0h
0126++ 0000             _P_promptTop          equ         0C1E2h
0127++ 0000             _P_promptCursor       equ         0C1E5h
0128++ 0000             _P_promptTail         equ         0C1E8h
0129++ 0000             _P_promptBtm          equ         0C1EBh
0130++ 0000             _varType              equ         0C1EEh	; current variable type
0131++ 0000             _varCurrent           equ         0C1EFh	; current variable
0132++ 0000             _varFAFlags           equ         0C1F8h
0133++ 0000             _varClass             equ         0C1FAh
0134++ 0000             _catCurrent           equ         0C1FBh	; current catlg entry ptr
0135++ 0000             _menuActive           equ         0C1FDh	; number of active menus
0136++ 0000             _menu2Hilite          equ         0C1FEh	; selected entry (1-5)
0137++ 0000             _menuSingle           equ         0C1FFh
0138++ 0000             _menuAppStack         equ         0C201h	; stack of menu applications
0139++ 0000             _menuAppPtr           equ         0C20Dh	; pointer to end of stack
0140++ 0000             _menuAppDepth         equ         0C20Fh	; depth of menu app stack
0141++ 0000             _menuSysStack         equ         0C210h	; stack of menus
0142++ 0000             _menuSysPtr           equ         0C21Ch	; pointer to end of stack
0143++ 0000             _menuSysDepth         equ         0C21Eh	; depth (# of menus, limit=3)
0144++ 0000             _menuPrvStack         equ         0C21Fh
0145++ 0000             _menuPrvPtr           equ         0C22Bh
0146++ 0000             _menuPrvDepth         equ         0C22Dh
0147++ 0000             _m2i                  equ         0C22Eh	; active menu entries
0148++ 0000             _menuDyn1             equ         0C242h	; Dynamic menu entries
0149++ 0000             _menuDyn5             equ         0C26Ah	; ie, program menu and solver
0150++ 0000             _userMenu1            equ         0C274h
0151++ 0000             _userMenuTitle        equ         0C275h
0152++ 0000             _userMenu2            equ         0C27Ch
0153++ 0000             _userMenu3            equ         0C284h
0154++ 0000             _userMenu4            equ         0C28Ch
0155++ 0000             _userMenu5            equ         0C294h
0156++ 0000             _userMenuSA           equ         0C29Ch
0157++ 0000             _XSTATSAV             equ         0C31Ch
0158++ 0000             _ioPrompt             equ         0C324h
0159++ 0000             _YSTATSAV             equ         0C326h
0160++ 0000             _FSTATSAV             equ         0C330h
0161++ 0000             _IOSNDTYP             equ         0C33Ah
0162++ 0000             _SNDRECSTATE          equ         0C33Bh
0163++ 0000             _IOERRSTATE           equ         0C33Ch
0164++ 0000             _HEADER               equ         0C33Dh
0165++ 0000             _IODATA               equ         0C346h
0166++ 0000             _BAKHEADER            equ         0C352h
0167++ 0000             _TBLRNGSGN            equ         0C35Bh
0168++ 0000             _calc_id              equ         0C35Ch
0169++ 0000             _penCol               equ         0C37Ch	; pen column
0170++ 0000             _penRow               equ         0C37Dh	; pen row
0171++ 0000             _P_RCLQUEUE           equ         0C37Eh
0172++ 0000             _ERRNO                equ         0C381h	; error number
0173++ 0000             _ERRSP                equ         0C382h	; error stack pointer
0174++ 0000             _errOffset            equ         0C384h	; error offset
0175++ 0000             _ram_to_use           equ         0C386h
0176++ 0000             _offerr_sav_bc        equ         0C390h
0177++ 0000             _ABS_SRC_ADDR         equ         0C392h	; 3 byte ABS address pointer
0178++ 0000             _ABS_DEST_ADDR        equ         0C395h	; 3 byte ABS address pointer
0179++ 0000             _MM_NUM_BYTES         equ         0C398h	; 3 byte block move counter
0180++ 0000             _mm_tmp1              equ         0C39Bh
0181++ 0000             _mm_tmp2              equ         0C39Dh
0182++ 0000             _mm_tmp3              equ         0C39Fh
0183++ 0000             _mm_tmp4              equ         0C3A1h
0184++ 0000             _mm_tmp5              equ         0C3A3h
0185++ 0000             _ram_cache            equ         0C3A5h
0186++ 0000             _Flags                equ         0C3E5h	; system flags
0187++ 0000             _ram_to_use1          equ         0C40Ah	; user flags
0188++ 0000             _statReg              equ         0C414h
0189++ 0000             _STATVARS             equ         0C415h	; free if res statsvalid,(iy+statflags)
0190++ 0000             _STCounter            equ         0C555h	; self test counter
0191++ 0000             _curgstyle            equ         0C555h
0192++ 0000             _curGY                equ         0C556h
0193++ 0000             _curGX                equ         0C557h
0194++ 0000             _curGY2               equ         0C558h
0195++ 0000             _curGX2               equ         0C559h
0196++ 0000             _curgstyle_save       equ         0C55Ah
0197++ 0000             _curgstylesave        equ         0C55Bh
0198++ 0000             _plotflagsave         equ         0C55Ch
0199++ 0000             _XMINPTR              equ         0C55Dh	; pointers
0200++ 0000             _XMAXPTR              equ         0C55Fh	;
0201++ 0000             _XSCLPTR              equ         0C561h	;
0202++ 0000             _YMINPTR              equ         0C563h	;
0203++ 0000             _YMAXPTR              equ         0C565h	;
0204++ 0000             _YSCLPTR              equ         0C567h	;
0205++ 0000             _DIF1STCURINC         equ         0C569h
0206++ 0000             _TRACEPLOT            equ         0C56Bh
0207++ 0000             _BOXPLOTINFO          equ         0C56Ch
0208++ 0000             _SCURINC              equ         0C56Dh
0209++ 0000             _CURINC               equ         0C56Fh
0210++ 0000             _YPIXEL               equ         0C571h
0211++ 0000             _ORGXMIN              equ         0C572h
0212++ 0000             _PANSHIFT             equ         0C57Ch
0213++ 0000             _USRRNGSIZE           equ         0C586h
0214++ 0000             _UTHETMIN             equ         0C588h
0215++ 0000             _STSP                 equ         0C58Dh
0216++ 0000             _STRAMStart           equ         0C58Dh
0217++ 0000             _UTHETMAX             equ         0C592h
0218++ 0000             _UTHETSTEP            equ         0C59Ch
0219++ 0000             _UTPLOT               equ         0C5A6h
0220++ 0000             _UTMIN                equ         0C5B0h
0221++ 0000             _UTMAX                equ         0C5BAh
0222++ 0000             _UTSTEP               equ         0C5C4h
0223++ 0000             _UXMIN                equ         0C5CEh
0224++ 0000             _UXMAX                equ         0C5D8h
0225++ 0000             _UXSCL                equ         0C5E2h
0226++ 0000             _UYMIN                equ         0C5ECh
0227++ 0000             _UYMAX                equ         0C5F6h
0228++ 0000             _UYSCL                equ         0C600h
0229++ 0000             _UXRES                equ         0C60Ah
0230++ 0000             _XRES_INT             equ         0C614h
0231++ 0000             _HDERIV               equ         0C615h
0232++ 0000             _TOL                  equ         0C61Fh	; tol(tolerance)
0233++ 0000             _XFACT                equ         0C629h
0234++ 0000             _YFACT                equ         0C633h
0235++ 0000             _DELTAX               equ         0C63Dh	; delta x
0236++ 0000             _DELTAY               equ         0C647h	; delta y
0237++ 0000             _SHORTX               equ         0C651h	
0238++ 0000             _SHORTY               equ         0C65Bh
0239++ 0000             _FUNRNGSIZE           equ         0C665h
0240++ 0000             _FLAGSF               equ         0C667h	; settings for Func Mode
0241++ 0000             _XMINF                equ         0C668h	;
0242++ 0000             _XMAXF                equ         0C672h	;
0243++ 0000             _XSCLF                equ         0C67Ch	;
0244++ 0000             _YMINF                equ         0C686h	;
0245++ 0000             _YMAXF                equ         0C690h	;
0246++ 0000             _YSCLF                equ         0C69Ah	;
0247++ 0000             _LOWER                equ         0C6A4h	;
0248++ 0000             _UPPER                equ         0C6AEh	;
0249++ 0000             _XRES                 equ         0C6B8h	; Func Mode settings end
0250++ 0000             _POLRNGSIZE           equ         0C6C2h
0251++ 0000             _FLAGSPOL             equ         0C6C4h	; settings for Pol Mode
0252++ 0000             _THETAMIN             equ         0C6C5h	;
0253++ 0000             _THETAMAX             equ         0C6CFh	;
0254++ 0000             _THETASTEP            equ         0C6D9h	;
0255++ 0000             _XMINPOL              equ         0C6E3h	;
0256++ 0000             _XMAXPOL              equ         0C6EDh	;
0257++ 0000             _XSCLPOL              equ         0C6F7h	;
0258++ 0000             _YMINPOL              equ         0C701h	;
0259++ 0000             _YMAXPOL              equ         0C70Bh	;
0260++ 0000             _YSCLPOL              equ         0C715h	; Pol Mode settings end
0261++ 0000             _PARRNGSIZE           equ         0C71Fh	
0262++ 0000             _FLAGSPAR             equ         0C721h	; settings for Param Mode
0263++ 0000             _TMINPAR              equ         0C722h	;
0264++ 0000             _TMAXPAR              equ         0C72Ch	;
0265++ 0000             _TSTEPPAR             equ         0C736h	;
0266++ 0000             _XMINPAR              equ         0C740h	;
0267++ 0000             _XMAXPAR              equ         0C74Ah	;
0268++ 0000             _XSCLPAR              equ         0C754h	;
0269++ 0000             _YMINPAR              equ         0C75Eh	;
0270++ 0000             _YMAXPAR              equ         0C768h	;
0271++ 0000             _YSCLPAR              equ         0C772h	; Param mode settings end
0272++ 0000             _DIFRNGSIZE           equ         0C77Ch
0273++ 0000             _FLAGSDIF             equ         0C77Eh	; settings for DifEq Mode
0274++ 0000             _TOLERDIF             equ         0C77Fh	;
0275++ 0000             _TPLOTDIF             equ         0C789h	;
0276++ 0000             _TMINDIF              equ         0C793h	;
0277++ 0000             _TMAXDIF              equ         0C79Dh	;
0278++ 0000             _TSTEPDIF             equ         0C7A7h	;
0279++ 0000             _XMINDIF              equ         0C7B1h	;
0280++ 0000             _XMAXDIF              equ         0C7BBh	;
0281++ 0000             _XSCLDIF              equ         0C7C5h	;
0282++ 0000             _YMINDIF              equ         0C7CFh	;
0283++ 0000             _YMAXDIF              equ         0C7D9h	;
0284++ 0000             _YSCLDIF              equ         0C7E3h	;
0285++ 0000             _XAXISDIF             equ         0C7EDh	;
0286++ 0000             _YAXISDIF             equ         0C7EEh	; DifEq Settings end
0287++ 0000             _SLOPEF_EQU           equ         0C7EFh
0288++ 0000             _DIRF_X               equ         0C7F0h
0289++ 0000             _DIRF_Y               equ         0C7F1h
0290++ 0000             _DIRF_TIME            equ         0C7F2h
0291++ 0000             _FRES                 equ         0C7FCh
0292++ 0000             _INTS                 equ         0C806h
0293++ 0000             _DNEQ                 equ         0C810h
0294++ 0000             _P_XOUTSYM            equ         0C811h
0295++ 0000             _P_XOUTDAT            equ         0C814h
0296++ 0000             _P_YOUTSYM            equ         0C817h
0297++ 0000             _P_YOUTDAT            equ         0C81Ah
0298++ 0000             _P_INPUTSYM           equ         0C81Dh
0299++ 0000             _P_INPUTDAT           equ         0C820h
0300++ 0000             _P_FOUTDAT            equ         0C823h
0301++ 0000             _PREVDATA             equ         0C826h
0302++ 0000             _PREVDATA_EXT         equ         0C862h
0303++ 0000             _P1TYPE               equ         0C86Ch
0304++ 0000             _SavX1List            equ         0C86Dh
0305++ 0000             _SavY1List            equ         0C876h
0306++ 0000             _SavF1List            equ         0C87Fh
0307++ 0000             _P1FRQONOFF           equ         0C888h
0308++ 0000             _P2TYPE               equ         0C889h
0309++ 0000             _SavX2List            equ         0C88Ah
0310++ 0000             _SavY2List            equ         0C893h
0311++ 0000             _SavF2List            equ         0C89Ch
0312++ 0000             _P2FRQONOFF           equ         0C8A5h
0313++ 0000             _P3TYPE               equ         0C8A6h
0314++ 0000             _SavX3List            equ         0C8A7h
0315++ 0000             _SavY3List            equ         0C8B0h
0316++ 0000             _SavF3List            equ         0C8B9h
0317++ 0000             _P3FRQONOFF           equ         0C8C2h
0318++ 0000             _oldtype              equ         0C8C3h
0319++ 0000             _oldxlist             equ         0C8C4h
0320++ 0000             _oldylist             equ         0C8CDh
0321++ 0000             _oldflist             equ         0C8D6h
0322++ 0000             _uppery               equ         0C8D6h
0323++ 0000             _oldonoff             equ         0C8DFh
0324++ 0000             _tblpsrow             equ         0C8E0h
0325++ 0000             _tblscroll            equ         0C8E1h
0326++ 0000             _INPUTDAT_PG0         equ         0C8E3h
0327++ 0000             _TblLine              equ         0C8EDh
0328++ 0000             _OldTblMin            equ         0C8F7h
0329++ 0000             _TBLRNGSIZE           equ         0C901h
0330++ 0000             _TblMin               equ         0C903h
0331++ 0000             _TblStep              equ         0C90Dh
0332++ 0000             _TABLESGN             equ         0C917h
0333++ 0000             _TableYPtr            equ         0C918h
0334++ 0000             _curTblcol            equ         0C919h
0335++ 0000             _curTblrow            equ         0C91Ah
0336++ 0000             _dspTblcol            equ         0C91Bh
0337++ 0000             _dspTblrow            equ         0C91Ch
0338++ 0000             _higTblcol            equ         0C91Dh
0339++ 0000             _higTblrow            equ         0C91Eh
0340++ 0000             _TABLEXDATA           equ         0C920h
0341++ 0000             _TBLMATRIX            equ         0C920h
0342++ 0000             _TABLEYDATA           equ         0C95Ch
0343++ 0000             _TABLETEMPLATE        equ         0C9D4h
0344++ 0000             _SavedEqTok           equ         0C9D5h
0345++ 0000             _SavedEqNum1          equ         0C9D7h
0346++ 0000             _SavedEqTok1          equ         0C9D8h
0347++ 0000             _SaveAppFlags         equ         0C9DAh
0348++ 0000             _SaveCurFlags         equ         0C9DBh
0349++ 0000             _SaveCurGstyle        equ         0C9DCh
0350++ 0000             _SaveGraphFlags       equ         0C9DDh
0351++ 0000             _evalflevel           equ         0C9DEh
0352++ 0000             _TmpMatCols           equ         0C9DFh
0353++ 0000             _ES                   equ         0C9DFh
0354++ 0000             _TmpMatRows           equ         0C9E0h
0355++ 0000             _P_DERIVPTR           equ         0C9E1h
0356++ 0000             _DTMPThresh           equ         0C9E4h
0357++ 0000             _ELCPLXLCNT           equ         0C9E6h
0358++ 0000             _DERIVLEVEL           equ         0C9E8h
0359++ 0000             _P_DIFFEQPTR          equ         0C9E9h	; absolute address to diff eq
0360++ 0000             _P_DSOLVPTR           equ         0C9EBh	; absolute address to solver eq
0361++ 0000             _SOLVAR               equ         0C9EEh	; length byte, current solver variable
0362++ 0000             _P_QUADPTR            equ         0C9F7h
0363++ 0000             _plotSScreen          equ         0C9FAh	; graph mem
0364++ 0000             _SEED1                equ         0CDFAh
0365++ 0000             _SEED2                equ         0CE04h
0366++ 0000             _PARSEVAR             equ         0CE0Eh	; last parsed variable
0367++ 0000             _P_BEGPC              equ         0CE18h
0368++ 0000             _P_CURPC              equ         0CE1Bh
0369++ 0000             _P_ENDPC              equ         0CE1Eh
0370++ 0000             _ELCNT                equ         0CE21h	; end of line count
0371++ 0000             _COLCNT               equ         0CE23h	; column count
0372++ 0000             _ROWCNT               equ         0CE24h	; row count
0373++ 0000             _LCOUNT               equ         0CE25h
0374++ 0000             _EOS_ASAP_2ND         equ         0CE27h
0375++ 0000             _EXEC_CONV_SAVE       equ         0CE28h
0376++ 0000             _LASTENTRYPTR         equ         0CE2Ah	; pointer to end of stack
0377++ 0000             _LASTENTRYSTK         equ         0CE2Ch	; last entry stack
0378++ 0000             _numlastentries       equ         0CEACh	; number of entries
0379++ 0000             _currlastentry        equ         0CEADh
0380++ 0000             _FREESAVEY            equ         0CEAEh
0381++ 0000             _FREESAVEX            equ         0CEAFh
0382++ 0000             _STRACESAVE_TYPE      equ         0CEB0h
0383++ 0000             _STRACESAVE           equ         0CEB1h
0384++ 0000             _TRACESAVE            equ         0CEB3h
0385++ 0000             _DIF_T_SAVE           equ         0CEB5h
0386++ 0000             _A_B_SAVE             equ         0CEBFh
0387++ 0000             _A_B_TYPE             equ         0CEC0h
0388++ 0000             _GS_DELX              equ         0CEC1h
0389++ 0000             _GS_D1_YINC           equ         0CEC2h
0390++ 0000             _GS_D2_YINC           equ         0CEC3h
0391++ 0000             _GS_DELY              equ         0CEC4h
0392++ 0000             _GS_MAX_Y_PIX         equ         0CEC5h
0393++ 0000             _CURRENT_STYLE        equ         0CEC6h	; current graph style
0394++ 0000             _CL_X1                equ         0CEC7h
0395++ 0000             _CL_X2                equ         0CEC8h
0396++ 0000             _CL_Y_DAT             equ         0CEC9h
0397++ 0000             _PREV_POINT           equ         0CECBh
0398++ 0000             _RESSAVE              equ         0CECDh
0399++ 0000             _DREQU_X              equ         0CECEh
0400++ 0000             _DREQU_XINIT          equ         0CECFh
0401++ 0000             _DREQU_Y              equ         0CED9h
0402++ 0000             _DREQU_YINIT          equ         0CEDAh
0403++ 0000             _DREQU_XLIST          equ         0CEE4h
0404++ 0000             _DREQU_YLIST          equ         0CEE7h
0405++ 0000             _DREQU_tLIST          equ         0CEEAh
0406++ 0000             _DREQU_COUNT          equ         0CEEDh
0407++ 0000             _GY1                  equ         0CEEFh
0408++ 0000             _GX1                  equ         0CF21h
0409++ 0000             _GR1                  equ         0CF53h
0410++ 0000             _GQ1                  equ         0CF85h
0411++ 0000             _EQU_EDIT_SAVE        equ         0CF8Ah	; 
0412++ 0000             _FORMULA_BITMAP       equ         0CF8Bh	; Solver buffer
0413++ 0000             _MENUCMD_M2I          equ         0CFABh	; menu shadow
0414++ 0000             _cmdShadow            equ         0CFABh	; _cmdShadow
0415++ 0000             _MENUCMD_ITEMS        equ         0CFC9h
0416++ 0000             _MENUCMD_NUMROWS      equ         0D041h
0417++ 0000             _MENUCMD_CURROW       equ         0D042h
0418++ 0000             _cmdShadCur           equ         0D053h	; shadow cursors
0419++ 0000             _cmdShadAlph          equ         0D055h	;
0420++ 0000             _cmdShadIns           equ         0D056h	;
0421++ 0000             _cmdCursor            equ         0D057h	; cursor
0422++ 0000             _P_editTop            equ         0D059h	; Program editor top
0423++ 0000             _P_EDITCURSOR         equ         0D05Ch	; program editor cursor
0424++ 0000             _P_editTail           equ         0D05Fh
0425++ 0000             _P_editBtm            equ         0D062h	; Program editor bottom
0426++ 0000             _curmatcol            equ         0D065h
0427++ 0000             _curmatrow            equ         0D066h
0428++ 0000             _curlstrow            equ         0D067h
0429++ 0000             _numedTbl             equ         0D069h
0430++ 0000             _curlistel            equ         0D069h
0431++ 0000             _curlstrowh           equ         0D06Ah
0432++ 0000             _higmatcol            equ         0D06Bh
0433++ 0000             _higmatrow            equ         0D06Ch
0434++ 0000             _higlstrow            equ         0D06Dh
0435++ 0000             _maxdsprow            equ         0D06Fh
0436++ 0000             _ForCurMat            equ         0D070h
0437++ 0000             _higlstrowh           equ         0D070h
0438++ 0000             _ForDspCol            equ         0D072h
0439++ 0000             _forerrornum          equ         0D074h
0440++ 0000             _P_editSym            equ         0D075h
0441++ 0000             _P_editDat            equ         0D078h
0442++ 0000             _DspMatCol            equ         0D07Bh
0443++ 0000             _DspMatRow            equ         0D07Ch
0444++ 0000             _TmpMatCol            equ         0D07Dh
0445++ 0000             _TmpMatRow            equ         0D07Eh
0446++ 0000             _numoflist            equ         0D07Fh	; num of lists in buffer
0447++ 0000             _num1stlist           equ         0D080h	; num of first list
0448++ 0000             _NumCurList           equ         0D081h	; num of current list
0449++ 0000             _STATED_CUT_COL       equ         0D082h
0450++ 0000             _listnamebuffer       equ         0D083h	; list buffer(numbered)
0451++ 0000             _LastName             equ         0D12Eh
0452++ 0000             _modeRoot             equ         0D137h
0453++ 0000             _modeCount            equ         0D139h
0454++ 0000             _modeItem             equ         0D13Ah
0455++ 0000             _modePtr              equ         0D13Bh
0456++ 0000             _winTop               equ         0D13Dh	; first homescreen row
0457++ 0000             _winBtm               equ         0D13Eh	; last homescreen row
0458++ 0000             _winLeftEdge          equ         0D13Fh	
0459++ 0000             _winLeft              equ         0D140h
0460++ 0000             _winAbove             equ         0D142h
0461++ 0000             _winRow               equ         0D144h
0462++ 0000             _winCol               equ         0D146h
0463++ 0000             _fmtDigits            equ         0D148h
0464++ 0000             _fmtString            equ         0D149h
0465++ 0000             _fmtConv              equ         0D18Ah
0466++ 0000             _fmtLeft              equ         0D19Eh
0467++ 0000             _fmtIndex             equ         0D1A0h
0468++ 0000             _P_fmtMatSym          equ         0D1A2h
0469++ 0000             _P_fmtMatMem          equ         0D1A5h
0470++ 0000             _EQS                  equ         0D1A8h
0471++ 0000             _LSTINDEX             equ         0D1AAh
0472++ 0000             _LSTSIZE              equ         0D1ACh
0473++ 0000             _EQUINDEX             equ         0D1AEh
0474++ 0000             _order                equ         0D1B0h	; polynomial degree
0475++ 0000             _xnamesav             equ         0D1B1h
0476++ 0000             _ynamesav             equ         0D1BAh
0477++ 0000             _CustMType            equ         0D1C3h	; type=09(new) or 08(sub)
0478++ 0000             _MCustM               equ         0D1C3h	; 
0479++ 0000             _CustMLen             equ         0D1C4h	; number of custmnames
0480++ 0000             _CustMSav             equ         0D1C5h	; pointers to names
0481++ 0000             _custmnames           equ         0D1E3h	; the menu entries
0482++ 0000             _VARSAVECNT           equ         0D279h
0483++ 0000             _DELADJAMT            equ         0D27Ah
0484++ 0000             _TEMPINPUT            equ         0D27Dh
0485++ 0000             _TSYMPTR1             equ         0D27Eh
0486++ 0000             _TSYMPTR2             equ         0D280h
0487++ 0000             _P_CHKDELPTR3         equ         0D282h
0488++ 0000             _P_CHKDELPTR4         equ         0D285h
0489++ 0000             _P_TEMPMEM            equ         0D288h
0490++ 0000             _FPBASE               equ         0D28Bh
0491++ 0000             _FPS                  equ         0D28Dh	; fp stack pointer
0492++ 0000             _OPBASE               equ         0D28Fh
0493++ 0000             _OPS                  equ         0D291h	; op stack pointer
0494++ 0000             _PTempCnt             equ         0D293h
0495++ 0000             _CLEANTMP             equ         0D295h
0496++ 0000             _P_PTEMP              equ         0D297h
0497++ 0000             _PTEMP_END            equ         0D29Ah
0498++ 0000             _FREE_MEM             equ         0D29Dh	; available user memory
0499++ 0000             _newdataptr           equ         0D2A0h
0500++ 0000             _SavBotRow            equ         0D2A3h
0501++ 0000             _curstatplot          equ         0D2B8h
0502++ 0000             _curstatplotprompt    equ         0D2B9h
0503++ 0000             _difeqfieldmode       equ         0D2BAh
0504++ 0000             _matedoldtype         equ         0D2BBh
0505++ 0000             _modesave1            equ         0D2BCh
0506++ 0000             _statansfirst         equ         0D2BDh
0507++ 0000             _statanslast          equ         0D2BFh
0508++ 0000             _statanscur           equ         0D2C1h
0509++ 0000             _charmap              equ         0D2C3h
0510++ 0000             _altcharmap           equ         0D2CBh
0511++ 0000             _toktmp1              equ         0D2D3h
0512++ 0000             _toktmp2              equ         0D2D4h
0513++ 0000             _IOSAVOP1             equ         0D2D5h
0514++ 0000             _DELVAR_SAV_F         equ         0D2DFh
0515++ 0000             _DEL_SAV_OP1          equ         0D2E0h
0516++ 0000             _alt_asm_exec_btm     equ         0D2EBh
0517++ 0000             _altlfontptr          equ         0D2EDh	; user font pointer
0518++ 0000             _altsfontptr          equ         0D2F0h
0519++ 0000             _altonptr             equ         0D2F3h
0520++ 0000             _altslinkptr          equ         0D2F6h
0521++ 0000             _alt_ret_status       equ         0D2F9h
0522++ 0000             _alt_ret_jmp_page     equ         0D2FAh
0523++ 0000             _alt_ret_jmp_addr     equ         0D2FBh
0524++ 0000             _alt_int_chksum       equ         0D2FDh	; checksum for interrupt
0525++ 0000             _alt_interrupt_exec   equ         0D2FEh	; interrupt
0526++ 0000             _alt_slink_chksum     equ         0D3C6h	; checksum for slink_exec
0527++ 0000             _alt_slink_exec       equ         0D3C7h	; slink
0528++ 0000             _alt_on_chksum        equ         0D48Fh	; checksum for on_exec
0529++ 0000             _alt_on_exec          equ         0D490h	; executed when turned on
0530++ 0000             _alt_off_chksum       equ         0D558h	; checksum for off_exec
0531++ 0000             _alt_off_exec         equ         0D559h	; executed when turned off
0532++ 0000             _altram_end           equ         0D621h
0533++ 0000             _asm_exec_btm         equ         0D621h
0534++ 0000             _ASAP_IND             equ         0D623h
0535++ 0000             _asm_reg_af           equ         0D624h	; saved registers start
0536++ 0000             _asm_reg_a            equ         0D625h	;
0537++ 0000             _asm_reg_l            equ         0D626h	;
0538++ 0000             _asm_reg_hl           equ         0D626h	;
0539++ 0000             _asm_reg_h            equ         0D627h	;
0540++ 0000             _asm_reg_bc           equ         0D628h	;
0541++ 0000             _asm_reg_c            equ         0D628h	;
0542++ 0000             _asm_reg_b            equ         0D629h	;
0543++ 0000             _asm_reg_de           equ         0D62Ah	;
0544++ 0000             _asm_reg_e            equ         0D62Ah	;
0545++ 0000             _asm_reg_d            equ         0D62Bh	; saved registers end
0546++ 0000             _mPrgmMATH            equ         0D62Ch
0547++ 0000             _mMath                equ         0D64Ch	; pointers math menu entries
0548++ 0000             _mMath_asap1          equ         0D65Ah	; ptrs to math menu asaps
0549++ 0000             _mMath_asap2          equ         0D65Ch	;
0550++ 0000             _mMath_asap3          equ         0D65Eh	;
0551++ 0000             _iASAP1               equ         0D66Ch	; space for asap entries
0552++ 0000             _iASAP2               equ         0D678h	;
0553++ 0000             _iASAP3               equ         0D684h	;
0554++ 0000             _iASAP4               equ         0D690h	;
0555++ 0000             _iASAP5               equ         0D69Ch	;
0556++ 0000             _iASAP6               equ         0D6A8h	;
0557++ 0000             _iASAP7               equ         0D6B4h	;
0558++ 0000             _iASAP8               equ         0D6C0h	;
0559++ 0000             _iASAP9               equ         0D6CCh	; end of space for asaps
0560++ 0000             _asapnames            equ         0D6D8h	;
0561++ 0000             _asap_nl1             equ         0D6D8h	; names of asap programs
0562++ 0000             _asap_nl2             equ         0D6E1h	; for tokens
0563++ 0000             _asap_nl3             equ         0D6EAh	;
0564++ 0000             _asapvar              equ         0D6FCh	; name of the current asm prog
0565++ 0000             _tokspell_asap1       equ         0D706h	; pointers to tables of
0566++ 0000             _tokspelltblptr       equ         0D706h	; token spelling
0567++ 0000             _tokspell_asap2       equ         0D708h	;
0568++ 0000             _tokspell_asap3       equ         0D70Ah	;
0569++ 0000             _numtokens            equ         0D70Eh	; number of tokens in each
0570++ 0000             _numtok_asap1         equ         0D70Eh	; asap
0571++ 0000             _numtok_asap2         equ         0D70Fh	;
0572++ 0000             _numtok_asap3         equ         0D710h	;
0573++ 0000             _eostblptr            equ         0D712h	; ponters to table of
0574++ 0000             _eostbl_asap1         equ         0D712h	; token code
0575++ 0000             _eostbl_asap2         equ         0D714h	;
0576++ 0000             _eostbl_asap3         equ         0D716h	;
0577++ 0000             _Amenu_offset         equ         0D71Ah
0578++ 0000             _reinstall_asap1      equ         0D722h
0579++ 0000             _reinstall_vec        equ         0D722h
0580++ 0000             _reinstall_asap2      equ         0D724h
0581++ 0000             _reinstall_asap3      equ         0D726h
0582++ 0000             _asap1_ram            equ         0D72Ah
0583++ 0000             _asap2_ram            equ         0D734h
0584++ 0000             _asap3_ram            equ         0D73Eh
0585++ 0000             _checkStart           equ         0D748h
0586++ 0000             _asm_exec_ram         equ         0D748h	; start address for all ASM programs
0587++ 0000             
0588++ 0000             .end
0589++ 0000             ;;___________________________________________________________
0590++ 0000             ;;(C)1999 ACZ - Assembly Coder's Zenith - http://www.acz.org/
0007+  0000             #include "inc/Rom86.h"	; ROM calls
0001++ 0000             ; ACZ include file: ROM calls
0002++ 0000             ; Assembly Coder's Zenith - http://www.acz.org
0003++ 0000             ; version: January 18, 1999
0004++ 0000             
0005++ 0000             _ldhlind				equ		4010h	; ld hl,(hl)
0006++ 0000             _chkON					equ		4028h	; bit onInterrupt,(iy+onflags)
0007++ 0000             _bitgrffuncm			equ		402Ch	; bit grffuncm,(iy+grfmodeflags)
0008++ 0000             _bitgrfpolarm			equ		4030h	; bit grfpolarm,(iy+grfmodeflags)
0009++ 0000             _bitgrfparamm			equ		4034h	; bit grfparamm,(iy+grfmodeflags)
0010++ 0000             _bitgrfrecurm			equ		4038h	; bit grfrecurm,(iy+grfmodeflags)
0011++ 0000             _cphlde					equ		403Ch	; cp hl,de
0012++ 0000             _put_colon				equ		4040h	; disp ":"
0013++ 0000             _divHLby10				equ		4044h	; hl = hl/10
0014++ 0000             _divHLbyA				equ		4048h	; hl = hl/a
0015++ 0000             _divAHLby10				equ		404Ch	; ahl = ahl/10
0016++ 0000             _timeout				equ		4058h	; dec timeout counter. if 0, turn calc off
0017++ 0000             _resetAPD				equ		4060h	; reset APD counter
0018++ 0000             _scan_code				equ		4064h	; keyboard handler (read keyboard)
0019++ 0000             _get_key				equ		4068h	; a = key code
0020++ 0000             _jforcecmdnochar		equ		409Ch	; force out of program
0021++ 0000             _pPutAwayPrompt			equ		40B5h	; put home screen edit away
0022++ 0000             _call_cxPPutAway		equ 	40BDh
0023++ 0000             _call_cxPutAway			equ		40C1h
0024++ 0000             _call_cxSizeWind		equ		40C5h
0025++ 0000             _call_cxErrorEP			equ		40C9h
0026++ 0000             _call_cxMain			equ		40CDh
0027++ 0000             _cxNull					equ		40D1h
0028++ 0000             _p_cxNull				equ		40D2h
0029++ 0000             _err_handler			equ		40DDh	; default error handler
0030++ 0000             _set_cx_100				equ		40E1h
0031++ 0000             _set_cx_50				equ		40E5h
0032++ 0000             _set_cx_dec				equ		40E9h
0033++ 0000             _set_context			equ		40EDh	; init the State Monitor with a new set of context vectors
0034++ 0000             _off					equ		4101h	; turn calc off normally
0035++ 0000             _reset					equ		4109h	; reset calculator
0036++ 0000             _removTok				equ		4119h	; remove all user tokens
0037++ 0000             _errAxes				equ		412Dh	; error 35 AXES
0038++ 0000             _errFldOrder			equ		4130h	; error 36 FLD-ORDER
0039++ 0000             _errStatPlot			equ		4133h	; error 34 STAT PLOT
0040++ 0000             _errOverflow			equ		4136h	; error 01 OVERFLOW
0041++ 0000             _errDivBy0				equ		4139h	; error 02 DIV BY 0
0042++ 0000             _errSingularMat			equ		413ch	; error 03 SINGULAR MAT
0043++ 0000             _errDomain				equ		413fh	; error 04 DOMAIN
0044++ 0000             _errIncrement			equ		4142h	; error 05 INCREMENT
0045++ 0000             _errSyntax				equ		4145h	; error 07 SYNTAX
0046++ 0000             _errNumberBase			equ		4148h	; error 08 NUMBER BASE
0047++ 0000             _errMode				equ		414Bh	; error 09 MODE
0048++ 0000             _errDataType			equ		414eh	; error 10 DATA TYPE
0049++ 0000             _errArgument			equ		4151h	; error 11 ARGUMENT
0050++ 0000             _errDimMismatch			equ		4154h	; error 12 DIM MISMATCH
0051++ 0000             _errDimension			equ		4157h	; error 13 DIMENSION
0052++ 0000             _errUndefined			equ		415Ah	; error 14 UNDEFINED
0053++ 0000             _errReserved			equ		4169h	; error 16 RESERVED
0054++ 0000             _errInvalid				equ		416ch	; error 17 INVALID
0055++ 0000             _errIllegalNest			equ		416fh	; error 18 ILLEGAL NEST
0056++ 0000             _errBound				equ		4172h	; error 19 BOUND
0057++ 0000             _errGraphWindow			equ		4175h	; error 20 GRAPH WINDOW
0058++ 0000             _errZoom				equ		4178h	; error 21 ZOOM
0059++ 0000             _errBreak				equ		417bh	; error 06 BREAK
0060++ 0000             _errStat				equ		417eh	; error 23 STAT
0061++ 0000             _errConversion			equ		4181h	; error 24 CONVERSION
0062++ 0000             _errSolver				equ		4184h	; error 25 SOLVER
0063++ 0000             _errIterations			equ		4187h	; error 28 ITERATIONS
0064++ 0000             _errBadGuess			equ		418ah	; error 29 BAD GUESS
0065++ 0000             _errDifEqSetup			equ		418dh	; error 30 DIF EQ SETUP
0066++ 0000             _errPoly				equ		4190h	; error 32 POLY
0067++ 0000             _errTolNotMet			equ		4193h	; error 33 TOL NOT MET
0068++ 0000             _errLink				equ		4196h	; error 37 LINK
0069++ 0000             _errorA					equ		4199h	; invoke error message, a = error #
0070++ 0000             _error					equ		419Ch	; invoke error message, _ERRNO = error #
0071++ 0000             _instError				equ		41A1h	; install error handler (HL=ptr)
0072++ 0000             _removError				equ		41A4h	; remove error handler
0073++ 0000             _ld_de_fp0				equ		41B7h	; (de) = fp0
0074++ 0000             _ld_de_fp1				equ		41BBh	; (de) = fp1
0075++ 0000             _mulHL10				equ		41BFh	; hl = hl x 10
0076++ 0000             _ckop1cplx				equ		41C3h	; check if op1 is cplx
0077++ 0000             _ckcplx					equ		41C7h	; check if A & $1f = $01
0078++ 0000             _ckop1real				equ		41CBh	; get type of op1 in a
0079++ 0000             _cpop1op2				equ		41FBh	; cp op1,op2
0080++ 0000             _op3toop4				equ		4203h	; move 11 bytes at op3 to op4
0081++ 0000             _op1toop4				equ		4207h	; move 11 bytes at op1 to op4
0082++ 0000             _op2toop4				equ		420Bh	; move 11 bytes at op2 to op4
0083++ 0000             _movtoop4				equ		420Fh	; move 11 bytes at (hl) to op4
0084++ 0000             _op4toop2				equ		4213h	; move 11 bytes at op4 to op2
0085++ 0000             _op4toop3				equ		4217h	; move 11 bytes at op4 to op3
0086++ 0000             _op3toop2				equ		421Bh	; move 11 bytes at op3 to op2
0087++ 0000             _op1toop3				equ		421Fh	; move 11 bytes at op1 to op3
0088++ 0000             _movfrop1				equ		4223h	; move 11 bytes at op1 to (de)
0089++ 0000             _op5toop2				equ		4227h	; move 11 bytes at op5 to op2
0090++ 0000             _op5toop6				equ		422Bh	; move 11 bytes at op5 to op6
0091++ 0000             _op5toop4				equ		422Fh	; move 11 bytes at op5 to op4
0092++ 0000             _op1toop2				equ		4233h	; move 11 bytes at op1 to op2
0093++ 0000             _movtoop2				equ		4237h	; move 11 bytes at (hl) to op2
0094++ 0000             _op6toop2				equ		423Bh	; move 11 bytes at op6 to op2
0095++ 0000             _op6toop1				equ		423Fh	; move 11 bytes at op6 to op1
0096++ 0000             _op4toop1				equ		4243h	; move 11 bytes at op4 to op1
0097++ 0000             _op5toop1				equ		4247h	; move 11 bytes at op5 to op1
0098++ 0000             _op3toop1				equ		424Bh	; move 11 bytes at op3 to op1
0099++ 0000             _op4toop5				equ		424Fh	; move 11 bytes at op4 to op5
0100++ 0000             _op3toop5				equ		4253h	; move 11 bytes at op3 to op5
0101++ 0000             _op2toop5				equ		4257h	; move 11 bytes at op2 to op5
0102++ 0000             _movtoop5				equ		425Bh	; move 11 bytes at (hl) to op5
0103++ 0000             _op2toop6				equ		425Fh	; move 11 bytes at op2 to op6
0104++ 0000             _op1toop6				equ		4263h	; move 11 bytes at op1 to op6
0105++ 0000             _movtoop6				equ		4267h	; move 11 bytes at (hl) to op6
0106++ 0000             _op1toop5				equ		426Bh	; move 11 bytes at op1 to op5
0107++ 0000             _op2toop1				equ		426Fh	; move 11 bytes at op2 to op1
0108++ 0000             _movtoop1				equ		4273h	; move 11 bytes at (hl) to op1
0109++ 0000             _mov11b					equ		4277h	; move 11 bytes at (hl) to (de)
0110++ 0000             _mov10b					equ		427Bh	; move 10 bytes at (hl) to (de)
0111++ 0000             _mov9b					equ		427Fh	; move 9 bytes at (hl) to (de)
0112++ 0000             _mov9b_					equ		4283h	; move 9 bytes at (hl) to (de)
0113++ 0000             _mov8b					equ		4287h	; move 8 bytes at (hl) to (de)
0114++ 0000             _mov7b					equ		428Bh	; move 7 bytes at (hl) to (de)
0115++ 0000             _mov7b_					equ		428Fh	; move 7 bytes at (hl) to (de)
0116++ 0000             _mov6b					equ		4293h	; move 6 bytes at (hl) to (de)
0117++ 0000             _mov5b					equ		4297h	; move 5 bytes at (hl) to (de)
0118++ 0000             _mov4b					equ		429Bh	; move 4 bytes at (hl) to (de)
0119++ 0000             _mov3b					equ		429Fh	; move 3 bytes at (hl) to (de)
0120++ 0000             _mov2b					equ		42A3h	; move 2 bytes at (hl) to (de)
0121++ 0000             _op4toop2m				equ		42A7h
0122++ 0000             _op2toop3				equ		42CBh	; move 11 bytes at op2 to op3
0123++ 0000             _movtoop3				equ		42CFh	; move 11 bytes at (hl) to op3
0124++ 0000             _op4toop6				equ		42D3h	; move 11 bytes at op4 to op6
0125++ 0000             _mov10toop1				equ		42D7h	; move 10 bytes at (hl) to op1
0126++ 0000             _mov10toop1op2			equ		42DBh	; move 10 to op1, 10 to op2
0127++ 0000             _mov10toop2				equ		42DFh	; move 10 bytes at (hl) to op2
0128++ 0000             _movfroop1				equ		42E3h	; move 10 bytes at op1 to (de)
0129++ 0000             _op4set1				equ		42E7h	; op4 = floating point 1
0130++ 0000             _op3set1				equ		42EBh	; op3 = floating point 1
0131++ 0000             _op2set8				equ		42EFh	; op2 = floating point 8
0132++ 0000             _op2set5				equ		42F7h	; op2 = floating point 5
0133++ 0000             _op2set4				equ		42FBh	; op2 = floating point 4
0134++ 0000             _op2set3				equ		4303h	; op2 = floating point 3
0135++ 0000             _op1set1				equ		430Fh	; op1 = floating point 1
0136++ 0000             _op1set4				equ		4313h	; op1 = floating point 4
0137++ 0000             _op1set3				equ		4317h	; op1 = floating point 3
0138++ 0000             _op3set2				equ		431Bh	; op3 = floating point 2
0139++ 0000             _op1set2				equ		431Fh	; op1 = floating point 2
0140++ 0000             _op2set2				equ		4323h	; op2 = floating point 2
0141++ 0000             _op2set1				equ		432Fh	; op2 = floating point 1
0142++ 0000             _ld_hl_8z				equ		4343h	; 8 zeros to (hl)
0143++ 0000             _ld_hl_8a				equ		4347h	; 8 a to (hl)
0144++ 0000             _ld_hlplus1_7a			equ		434Bh	; 7 a to (hl+1)
0145++ 0000             _ld_hl_7a				equ		434Fh	; 7 a to (hl)
0146++ 0000             _op4set0				equ		4353h	; op4 = floating point 0
0147++ 0000             _op3set0				equ		4357h	; op3 = floating point 0
0148++ 0000             _op2set0				equ		435Bh	; op2 = floating point 0
0149++ 0000             _op1set0				equ		435Fh	; op1 = floating point 0
0150++ 0000             _ld_hl_fp0				equ		4363h	; (hl)= fp0
0151++ 0000             _zeroop1m				equ		4367h	; mantissa op1 = 0
0152++ 0000             _zeroop1				equ		436Bh	; 11 bytes op1 = 0
0153++ 0000             _zeroop2				equ		436Fh	; 11 bytes op2 = 0
0154++ 0000             _zeroop3				equ		4373h	; 11 bytes op3 = 0
0155++ 0000             _ld_hl_11z				equ		4377h	; 11 zeros to (hl)
0156++ 0000             _ld_hl_bz				equ		437Bh	; B zeros to (hl)
0157++ 0000             _shracc					equ		4383h	; shift bits in A four to the right
0158++ 0000             _shlacc					equ		438Bh	; shift bits in A four to the left
0159++ 0000             _ex_op2_op6				equ		446Fh	; swap op2,op6
0160++ 0000             _ex_op5_op6				equ		4473h	; swap op5,op6
0161++ 0000             _ex_op1_op5				equ		4477h	; swap op1,op5
0162++ 0000             _ex_op1_op6				equ		447Bh	; swap op1,op6
0163++ 0000             _ex_op2_op4				equ		447Fh	; swap op2,op4
0164++ 0000             _ex_op2_op5				equ		4483h	; swap op2,op5
0165++ 0000             _ex_op1_op3				equ		4487h	; swap op1,op3
0166++ 0000             _ex_op1_op4				equ		448Bh	; swap op1,op4
0167++ 0000             _ex_op1_op2				equ		448Fh	; swap op1,op2
0168++ 0000             _ckop1fp0				equ		449Bh	; set Z if op1 = fp 0
0169++ 0000             _ckop2fp0				equ		44A3h	; set Z if op2 = fp 0
0170++ 0000             _ckop1int				equ		44B3h	; set Z if op1 = fp integer
0171++ 0000             _ckint					equ		44B7h	; set Z if (hl)= fp integer
0172++ 0000             _ckop1odd				equ		44BBh	; set Z if op1 is even
0173++ 0000             _ckodd					equ		44BFh	; set Z if (hl) is even
0174++ 0000             _ckop2pos				equ		450Bh	; set Z if op2 is positive
0175++ 0000             _ckop1pos				equ		450Fh	; set Z if op1 is positive
0176++ 0000             _absop2					equ		4513h	; op2 = abs(op2)
0177++ 0000             _inco1exp				equ		4527h	; op1 = op1 x 10
0178++ 0000             _HtimesL				equ		4547h	; hl = h * l
0179++ 0000             _findsym_error			equ		458Fh	; just like findsym, error if undefined
0180++ 0000             _invsub					equ		45E3h
0181++ 0000             _PLUS1					equ		45EBh	; op1 = op1 + 1
0182++ 0000             _inc_ptr_ade			equ		45EFh	; ade = ade + 1
0183++ 0000             _ex_ahl_bde				equ		45F3h	; swap ahl and bde
0184++ 0000             _get_size_word			equ		460Bh	; get size word of var at bde
0185++ 0000             _setXXop1				equ		4613h	; convert hex # in A to flt point in op1
0186++ 0000             _setXXop2				equ		4617h	; convert hex # in A to flt point in op2
0187++ 0000             _setXXXXop2				equ		461Bh	; convert hex # in HL to flt point in op2
0188++ 0000             _load_ram_ahl			equ		462Fh	; decode ABS ahl, load the RAM page and set hl = offset
0189++ 0000             _conv_ahl				equ		4633h	; decode ABS ahl, a = RAM page, hl = offset
0190++ 0000             _inc_ptr_ahl			equ		4637h	; ahl = ahl + 1
0191++ 0000             _dec_ptr_ahl			equ		463Bh	; ahl = ahl - 1
0192++ 0000             _inc_ptr_bde			equ		463Fh	; bde = bde - 1
0193++ 0000             _dec_ptr_bde			equ		4643h	; bde = bde - 1
0194++ 0000             _set_abs_src_addr		equ		4647h	; ahl -> (_abs_src_addr)
0195++ 0000             _get_free_mem			equ		464Bh	; (_FREE_MEM) -> ahl
0196++ 0000             _set_mm_num_bytes		equ		464Fh	; ahl -> (_mm_num_bytes)
0197++ 0000             _round_OP1				equ		4657h
0198++ 0000             _check_asm				equ		46AFh	; set Z if prog at (bde) is asm
0199++ 0000             _jump_table				equ		46B7h	; hl->table _asap_ind=index
0200++ 0000             _memchk					equ		46BBh	; ahl = # bytes of free memory
0201++ 0000             _dec_ptr_ade			equ		46BFh	; ade = ade - 1
0202++ 0000             _getb_ahl				equ		46C3h	; a = (ABS ahl), hl = asic address
0203++ 0000             _cp_ahl_bde				equ		46C7h	; cp ahl,bde
0204++ 0000             _findsym				equ		46CBh	; look up var op1
0205++ 0000             _copy_fwd				equ		46D3h
0206++ 0000             _del_temp_vars			equ		46D7h	; delete temp vars
0207++ 0000             _createreal				equ		46EBh	; create real var op1
0208++ 0000             _createrconst			equ		46EFh	; create real constant var op1
0209++ 0000             _createcconst			equ		46F3h	; create cplx constant var op1
0210++ 0000             _createcplx				equ		46F7h	; create cplx var op1
0211++ 0000             _creatervect_temp		equ		46FBh
0212++ 0000             _creatervect			equ		46FFh	; create real vector op1, L = # elements
0213++ 0000             _createcvect_temp		equ		4703h
0214++ 0000             _createcvect			equ		4707h	; create cplx vector op1, L = # elements
0215++ 0000             _createrlist_temp		equ		470Bh
0216++ 0000             _createrlist			equ		470Fh	; create real list op1, HL = # elements
0217++ 0000             _createclist_temp		equ		4713h
0218++ 0000             _createclist			equ		4717h	; create cplx list op1, HL = # elements
0219++ 0000             _creatermat_temp		equ		471Bh
0220++ 0000             _creatermat				equ		471Fh	; create real matrix op1, HL = row,col
0221++ 0000             _createcmat_temp		equ		4723h
0222++ 0000             _createcmat				equ		4727h	; create cplx matrix op1, HL = row,col
0223++ 0000             _createstrng_temp		equ		472Bh
0224++ 0000             _createstrng			equ		472Fh	; create string op1, HL = # bytes
0225++ 0000             _createequ_temp			equ		4733h
0226++ 0000             _createequ				equ		4737h	; create equation op1, HL = # bytes
0227++ 0000             _createpict				equ		473Bh	; create picture var op1
0228++ 0000             _createprog				equ		474Fh	; create program var op1, HL = # bytes
0229++ 0000             _copy_bkwd				equ		475Bh
0230++ 0000             _delvar					equ		475Fh	; delete var
0231++ 0000             _update_VAT_ptrs		equ		476Fh
0232++ 0000             _get_size				equ		477Bh
0233++ 0000             _get_var_size			equ		477Fh
0234++ 0000             _push_bc_OPS			equ		4783h
0235++ 0000             _check_STACK_mem		equ		4787h
0236++ 0000             _pop_bc_OPS				equ		478Bh
0237++ 0000             _push_a_OPS				equ		478Fh
0238++ 0000             _pop_a_OPS				equ		4793h
0239++ 0000             _popop1					equ		479Fh	; pop real or complex to op1/op2
0240++ 0000             _poprealo6				equ		47A3h	; pop real num op6 from fp stack
0241++ 0000             _poprealo5				equ		47A7h	; pop real num op5 from fp stack
0242++ 0000             _poprealo4				equ		47ABh	; pop real num op4 from fp stack
0243++ 0000             _poprealo3				equ		47AFh	; pop real num op3 from fp stack
0244++ 0000             _poprealo2				equ		47A3h	; pop real num op2 from fp stack
0245++ 0000             _poprealo1				equ		47A7h	; pop real num op1 from fp stack
0246++ 0000             _sub_FPS_20				equ		47CBh
0247++ 0000             _sub_FPS_10				equ		47CFh
0248++ 0000             _sub_FPS_bc				equ		47D3h
0249++ 0000             _deallocfps1			equ		47DBh
0250++ 0000             _ram_page_1				equ		47E3h	; load RAM page 1, FPS page
0251++ 0000             _load_ram_OPS			equ		47E7h
0252++ 0000             _load_ram_ES			equ		47EBh
0253++ 0000             _load_ram_FPS			equ		47EFh
0254++ 0000             _ram_page_7				equ		47F3h	; load RAM page 7, symbol table page
0255++ 0000             _pushrealo1				equ		4813h	; push real num op1 to fp stack
0256++ 0000             _cpyto2fpst				equ		4893h
0257++ 0000             _cpyto1fpst				equ		4897h
0258++ 0000             _cpyto2fps1				equ		48AFh
0259++ 0000             _cpyto2fps2				equ		48C3h
0260++ 0000             _cpyo2tofpst			equ		48D7h
0261++ 0000             _cpyo6tofpst			equ		48DBh
0262++ 0000             _cpyo1tofpst			equ		48DFh
0263++ 0000             _cpydetofpst			equ		48E3h
0264++ 0000             _cpydetohlt				equ		48E7h
0265++ 0000             _cpydetohlc				equ		48EBh
0266++ 0000             _cpyo5tofps2			equ		48EFh
0267++ 0000             _cpyo2tofpsto1tofps1	equ		48F3h
0268++ 0000             _cpyo1tofps1			equ		48F7h
0269++ 0000             _cpydetofps1			equ		48FBh
0270++ 0000             _cpydetohl1				equ		48FFh
0271++ 0000             _cpyo2tofps2			equ		4903h
0272++ 0000             _cpyo3tofps2			equ		4907h
0273++ 0000             _cpyo6tofps2			equ		490Bh
0274++ 0000             _cpyo1tofps2			equ		490Fh
0275++ 0000             _cpydetofps2			equ		4913h
0276++ 0000             _cpydetohl2				equ		4917h
0277++ 0000             _cpyo5tofps3			equ		491Bh
0278++ 0000             _cpyo2tofps2o1tofps3	equ		491Fh
0279++ 0000             _cpyo1tofps3			equ		4923h
0280++ 0000             _cpydetofps3			equ		4927h
0281++ 0000             _cpydetohl3				equ		492Bh
0282++ 0000             _cpyo1tofps4			equ		492Fh
0283++ 0000             _cpydetofps4			equ		4933h
0284++ 0000             _cpydetohl4				equ		4937h
0285++ 0000             _cpyo1tofps6			equ		493Bh
0286++ 0000             _cpyo1tofps7			equ		493Fh
0287++ 0000             _cpyo1tofps8			equ		4943h
0288++ 0000             _ask_self_test			equ		494Fh
0289++ 0000             _self_test				equ		4953h
0290++ 0000             _strlen					equ		4957h	; bc = length of string (hl)
0291++ 0000             _strcpy					equ		495Bh	; hl->source, de->destination
0292++ 0000             _strcat					equ		495Fh	; hl->source, de->destination
0293++ 0000             _strcmp					equ		4963h	; compare (hl) to (de), length bytes first
0294++ 0000             _find_bit				equ		496Bh	; hl+=a/8 a=1<<(a%8)
0295++ 0000             _cursorOff				equ		498Ch	; turn off blinking cursor
0296++ 0000             _cursorOn				equ		4994h	; turn on blinking cursor
0297++ 0000             _reset_MATH				equ		49A0h
0298++ 0000             _disp_GRAPH				equ		49B0h
0299++ 0000             _flushallmenus			equ		49DCh	; clear the menu key stacks
0300++ 0000             _disp_menu				equ		49E8h
0301++ 0000             _exec_pg1				equ		4A0Ah
0302++ 0000             _putmap					equ		4A27h	; display a character (A=char)
0303++ 0000             _putc					equ		4A2Bh	; display a character and advance cursor
0304++ 0000             _dispAHL				equ		4A33h	; disp ahl deci
0305++ 0000             _puts					equ		4A37h	; display a zero-terminated string (HL=ptr)
0306++ 0000             _putps					equ		4A3Bh	; display a string with leading length byte
0307++ 0000             _newline				equ		4A5Fh	; move cursor to next line
0308++ 0000             _clrLCD					equ		4A7Eh	; clear LCD screen
0309++ 0000             _clrScrn				equ		4A82h	; clear LCD screen and _textShadow
0310++ 0000             _clrWindow				equ		4A86h	; clear between _winTop and _winBtm
0311++ 0000             _clrLine				equ		4A8Ah	; clear to end of line
0312++ 0000             _homeup					equ		4A95h	; cursor to top left of home screen
0313++ 0000             _vputmap				equ		4AA1h	; display variable width character (A=char)
0314++ 0000             _vputs					equ		4AA5h	; display a string of variable width characters
0315++ 0000             _vputsn					equ		4AA9h	; display B characters of string at (HL)
0316++ 0000             _runindicon				equ		4AADh	; turn on run indicator
0317++ 0000             _runindicoff			equ		4AB1h	; turn off run indicator
0318++ 0000             _clrText				equ		4AB5h
0319++ 0000             _exec_pg2				equ		4B1Bh
0320++ 0000             _binopexec1				equ		4B1Fh
0321++ 0000             _tofrac					equ		4B93h	; convert op1 to op1/op2
0322++ 0000             _gfudydx				equ		4B9Fh	; op1 = dy/dx
0323++ 0000             _INTOP1					equ		4C2Fh
0324++ 0000             _ahl_plus_2_pg3			equ		4C3Fh	; ahl = ahl + 2
0325++ 0000             _exec_basic				equ		4C47h	; basic program in op1
0326++ 0000             _stoAns					equ		4C9Fh	; store op1 to 'Ans' var
0327++ 0000             _stoY					equ		4CB3h	; store op1 to 'y' var
0328++ 0000             _stoX					equ		4CBBh	; store op1 to 'x' var
0329++ 0000             _stoOther				equ		4CBFh	; store pushed op to op1 var
0330++ 0000             _rclY					equ		4CDFh	; rcl 'y' var to op1
0331++ 0000             _rclX					equ		4CE3h	; rcl 'x' var to op1
0332++ 0000             _rclVarSym				equ		4CE7h	; rcl op1 var to op1
0333++ 0000             _get_token				equ		4D13h	; get byte from _P_CURPC to A
0334++ 0000             _get_varname			equ		4D1Bh	; get var name from _P_CURPC to A
0335++ 0000             _disp					equ		4D3Fh	; TI-BASIC "Disp" command
0336++ 0000             _pause					equ		4D43h	; TI-BASIC "Pause" command
0337++ 0000             _PDspGrph				equ		4D6Fh
0338++ 0000             _horizCmd				equ		4D73h	; op1 = y value
0339++ 0000             _vertCmd				equ		4D77h	; op1 = x value
0340++ 0000             _unpack_hex				equ		4DAFh	; a(hex) -> bc(dec)
0341++ 0000             _grbufcpy				equ		4E39h
0342++ 0000             _ILine					equ		4E51h
0343++ 0000             _IPoint					equ		4E59h
0344++ 0000             _geqnamea				equ		4E71h	; op1 = name of current EQ
0345++ 0000             _set_app_title			equ		4FA8h
0346++ 0000             _FindAlphaUp			equ		514Bh	; search VAT
0347++ 0000             _FindAlphaDn			equ		514Fh
0348++ 0000             _dispOP1				equ		515Bh	; display op1 as result
0349++ 0000             _dispDone				equ		515Fh	; print 'Done' right justified
0350++ 0000             _formReal				equ		5191h	; format real # op1 to displayable str op3-op4 (a=max width)
0351++ 0000             _CLine					equ		51E9h
0352++ 0000             _get_abs_src_addr		equ		5209h	; (_abs_src_addr) -> ahl
0353++ 0000             _get_word_ahl			equ		521Dh	; ld de,(ahl)  ahl = ahl + 2
0354++ 0000             _set_word_ahl			equ		5221h	; ld (ahl),de  ahl = ahl + 2
0355++ 0000             _abs_mov10toop1			equ		5235h	; ahl -> (_abs_src_addr) mov 10b (_abs_src_addr) -> OP1
0356++ 0000             _abs_mov10toop1_noset	equ		5239h	; move 10 bytes (_abs_src_addr) -> OP1
0357++ 0000             _abs_mov10b_set_d		equ		523Dh	; ahl -> (_abs_dest_addr) mov 10b (_abs_src_addr)->(_abs_dest_addr)
0358++ 0000             _abs_mov10b				equ		5249h	; move 10 bytes (_abs_src_addr) -> (_abs_dest_addr)
0359++ 0000             _abs_movfrop1_set_d		equ		5241h	; ahl -> (_abs_dest_addr) mov 10b OP1 -> (_abs_dest_addr)
0360++ 0000             _abs_movfrop1			equ		5245h	; move 10 bytes from OP1 -> (_abs_dest_addr)
0361++ 0000             _set_abs_dest_addr		equ		5285h	; ahl -> (_abs_dest_addr)
0362++ 0000             _RcPicGrph				equ		52B5h
0363++ 0000             _mm_ldir				equ		52EDh	; 24bit ldir
0364++ 0000             _mm_lddr				equ		52F1h	; 24bit lddr
0365++ 0000             _get_statvar			equ		5369h	; load (_STATVAR+10*a) to op1
0366++ 0000             _getky					equ		5371h
0367++ 0000             _low_battery			equ		5398h	; low battery message (ret to homescreen)
0368++ 0000             _mov10op2add			equ		5464h
0369++ 0000             _INTGR					equ		5468h	; op1 = intgr(op1)
0370++ 0000             _MINUS1					equ		5470h	; op1 = op1 - 1
0371++ 0000             _FPSUB					equ		5474h	; op1 = op1 - op2
0372++ 0000             _FPADD					equ		5478h	; op1 = op1 + op2
0373++ 0000             _TIMESPT5				equ		5484h	; op1 = .5 x op1
0374++ 0000             _FPSQUARE				equ		5488h	; op1 = op1^2
0375++ 0000             _FPMULT					equ		548Ch	; op1 = op1 x op2
0376++ 0000             _invop1op2				equ		5490h
0377++ 0000             _invop1s				equ		5494h	; op1 = -op1
0378++ 0000             _invop2s				equ		5498h	; op2 = -op2
0379++ 0000             _FRAC					equ		549Ch	; op1 = frac(op1)
0380++ 0000             _FPRECIP				equ		54A4h	; op1 = 1/op1
0381++ 0000             _FPDIV					equ		54A8h	; op1 = op1/op2
0382++ 0000             _SQROOT					equ		54ACh	; op1 = sqrt(op1), neg# -> error
0383++ 0000             _SQROOTP				equ		54B0h	; op1 = sqrt(op1), neg# -> complex
0384++ 0000             _RNDGUARD				equ		54BCh	; round op1 to 12 digits
0385++ 0000             _ROUND					equ		54C0h
0386++ 0000             _LNX					equ		54C4h	; op1 = ln(op1), neg# -> error
0387++ 0000             _LNXP					equ		54C8h	; op1 = ln(op1), neg# -> complex
0388++ 0000             _LOGXP					equ		54CCh	; op1 = log(op1), neg# -> error
0389++ 0000             _LOGX					equ		54D0h	; op1 = log(op1), neg# -> complex
0390++ 0000             _ETOX					equ		54D4h	; op1 = e^op1
0391++ 0000             _TENX					equ		54D8h	; op1 = 10^op1
0392++ 0000             _SIN					equ		54E0h	; op1 = sin(op1)
0393++ 0000             _COS					equ		54E4h	; op1 = cos(op1)
0394++ 0000             _TAN					equ		54E8h	; op1 = tan(op1)
0395++ 0000             _TANH					equ		54F0h	; op1 = hyp tan(op1)
0396++ 0000             _COSH					equ		54F4h	; op1 = hyp cos(op1)
0397++ 0000             _SINH					equ		54F8h	; op1 = hyp sin(op1)
0398++ 0000             _ACOS					equ		5508h	; op1 = inv cos(op1), no complex
0399++ 0000             _ACOSP					equ		550Ch	; op1 = inv cos(op1), complex ok
0400++ 0000             _ATAN					equ		5510h	; op1 = inv tan(op1)
0401++ 0000             _ASIN					equ		5514h	; op1 = inv sin(op1)
0402++ 0000             _ATANH					equ		551Ch	; op1 = inv hyp tan(op1)
0403++ 0000             _ASINH					equ		5524h	; op1 = inv hyp sin(op1)
0404++ 0000             _ACOSH					equ		5528h	; op1 = inv hyp cos(op1)
0405++ 0000             _YTOX					equ		5538h	; op1 = op1^op2
0406++ 0000             _randint				equ		5544h	; op1 = random int between op1 and fps
0407++ 0000             _writeb_inc_ahl			equ		5567h	; c -> (ABS ahl), ahl = ahl + 1
0408++ 0000             _convop1				equ		5577h	; op1 -> de,a  (max 9999)
0409++ 0000             _set_mode				equ		557Bh	; a = function ($56-$79)
0410++ 0000             _asmComp				equ		55a3h
0411++ 0000             _getkey					equ		55AAh
0412++ 0000             _random					equ		55DAh	; op1 = random number (0-1)
0413++ 0000             _vputspace				equ		5643h	; a = ' '  _vputmap
0414++ 0000             _get_char				equ		569Dh	; get char A bitmap to _charmap (5x7 font)
0415++ 0000             _get_vchar				equ		56A1h	; get char A bitmap to _charmap (variable width font)
0416++ 0000             _call_user_on			equ		56EAh	; execute user on routine
0417++ 0000             _call_user_off			equ		56EDh	; execute user off routine
0418++ 0000             _call_sqrtexpr			equ		56F0h	; execute (sqrt)EXPR prog
0419++ 0000             _call_sqrtparse			equ		56F3h	; execute (sqrt)PARSE prog
0420++ 0000             _call_sqrtexec			equ		56F6h	; execute (sqrt)EXEC prog
0421++ 0000             _call_sqrtform			equ		56F9h	; execute (sqrt)FORM prog
0422++ 0000             _call_sqrtcmdtok		equ		56FCh	; execute (sqrt)CMDTOK prog
0423++ 0000             _call_sqrthome			equ		56FFh	; execute (sqrt)HOME prog
0424++ 0000             _call_sqrtkey			equ		5702h	; execute (sqrt)KEY prog
0425++ 0000             _call_sqrtgrf			equ		5705h	; execute (sqrt)GRF prog
0426++ 0000             _exec_pg4				equ		5718h	; rom page 4 asm jump table routine
0427++ 0000             _exec_pg3				equ		5714h	; rom page 3 asm jump table routine
0428++ 0000             _linkExec				equ		571Ch	; link routines (use _ASAP_IND)
0429++ 0000             _exec_assembly			equ		5730h	; exec assembly prog op1
0430++ 0000             _errNoSignChng			equ		5732h	; error 27 NO SIGN CHNG
0431++ 0000             _instTok				equ		575Ch	; OP1=funcname bc=endofprog de=symtab hl=menutab
0432++ 0000             
0433++ 0000             .end
0434++ 0000             ;;__________________________________________________________
0435++ 0000             ;;(C)1999 ACZ - Assembly Coder's Zenith - http://www.acz.org
0008+  0000             
0009+  0000             .end
0010+  0000             
0011+  0000             ;==========================================================
0012+  0000             ; 					C R E D I T S
0013+  0000             ;==========================================================
0014+  0000             ;If you find something wrong with these include files,
0015+  0000             ;feel free to e-mail me (clem@acz.org)
0016+  0000             ;Many thanks to Joshua Seagoe for his ROM calls list
0017+  0000             ;and to Pat Milheron for all the TI-86 info ;-)
0018+  0000             ;__________________________________________________________
0019+  0000             ;(C)1999 ACZ - Assembly Coder's Zenith - http://www.acz.org
0011   0000             
0012   0000             cBitOfs   = $C0F9      ; WORD
0013   0000             cBit	  = $C0FB      ; 4 BYTE
0014   0000             cXY	  = $C0FF      ; WORD
0015   0000             cB	  = $C101      ; 24 BYTE
0016   0000             cRot	  = $C119      ; BYTE
0017   0000             flags	  = $C11A      ; BYTE  (0 - Quit, 1 - Update)
0018   0000             newXY	  = $C11B      ; WORD
0019   0000             newRot	  = $C11D      ; BYTE
0020   0000             counter   = $C11E      ; BYTE
0021   0000             next	  = $C11F      ; BYTE
0022   0000             linesflag = $C120      ; BYTE
0023   0000             score	  = $C121      ; WORD
0024   0000             scoreU	  = $C123      ; BYTE
0025   0000             lines	  = $C124      ; BYTE
0026   0000             level	  = $C125      ; BYTE
0027   0000             string	  = $C126      ; 6 BYTE
0028   0000             place	  = $C12C      ; BYTE
0029   0000             cNBitOfs  = $C12D      ; WORD
0030   0000             players   = $C12F      ; BYTE
0031   0000             lcounter  = $C130      ; WORD
0032   0000             declines  = $C132      ; BYTE
0033   0000             stlevel   = $C133      ; BYTE
0034   0000             lastbar   = $C134      ; BYTE
0035   0000             hsflag	  = $C135      ; BYTE
0036   0000             scrflag   = $C136      ; BYTE
0037   0000             gap	  = $C137      ; BYTE
0038   0000             sbyte	  = $C138      ; BYTE
0039   0000             sthigh	  = $C139      ; BYTE
0040   0000             high	  = $C13A      ; BYTE
0041   0000             linkcnt   = $C13B      ; BYTE
0042   0000             board	  = $CFAB      ; 40 BYTE
0043   0000             
0044   D748             .org $D748
0045   D748             
0046   D748             Start:
0047   D748 CD B1 4A     call BUSY_OFF	       ; Turn busy indicator off
0048   D74B FD CB 0D 8E  res 1,(iy+$0D)        ; _clrLCD, _puts etc doesn't affect the textshadow
0049   D74F 21 0C E3     ld hl,Resume
0050   D752 7E           ld a,(hl)
0051   D753 B7           or a		       ; Check if the game should resume
0052   D754 28 45        jr z,Restart
0053   D756 36 00        ld (hl),0	       ; Clear that flag so it doesn't resume next time
0054   D758 23           inc hl
0055   D759 11 F9 C0     ld de,cBitOfs
0056   D75C 01 43 00     ld bc,67
0057   D75F ED B0        ldir		       ; Copy variables
0058   D761 11 AB CF     ld de,board
0059   D764 01 28 00     ld bc,40
0060   D767 ED B0        ldir
0061   D769 CD 96 E0     call ShowLayout
0062   D76C CD AC DE     call ShowInfo
0063   D76F CD 57 E0     call ShowWell
0064   D772 CD 6F DD     call ShowCurB
0065   D775 11 05 FC     ld de,$FC05
0066   D778 21 11 C1     ld hl,cB+16
0067   D77B CD 76 DD     call ShowB	       ; This will show the next bit
0068   D77E C3 F5 D9     jp MainLoop
0069   D781             
0070   D781             PutDigit:	       ; Puts digit A on the correct place
0071   D781 F5           push af	       ; Used when choosing start level
0072   D782 2E 02        ld l,2
0073   D784 FE 05        cp 5
0074   D786 38 03        jr c,FirstRow
0075   D788 2C           inc l
0076   D789 D6 05        sub 5
0077   D78B             FirstRow:
0078   D78B 87           add a,a
0079   D78C C6 03        add a,3
0080   D78E 67           ld h,a
0081   D78F 22 0F C0     ld ($C00F),hl
0082   D792 F1           pop af
0083   D793 F5           push af
0084   D794 C6 30        add a,48
0085   D796 CD 2B 4A     call _putc
0086   D799 F1           pop af
0087   D79A C9           ret
0088   D79B             
0089   D79B             Restart:
0090   D79B CD 73 E0     call ShowFrame        ; Show "ZTETRIS 86" and "by Jimmy M†rdell"
0091   D79E 11 20 14     ld de,$1420
0092   D7A1 ED 53 7C C3  ld ($C37C),de
0093   D7A5 CD A5 4A     call _vputs	       ; "Choose player mode"
0094   D7A8 11 04 07     ld de,$0704
0095   D7AB ED 53 0F C0  ld ($C00F),de
0096   D7AF CD 37 4A     call _puts	       ; "1 player"
0097   D7B2 11 05 07     ld de,$0705
0098   D7B5 ED 53 0F C0  ld ($C00F),de
0099   D7B9 CD 37 4A     call _puts	       ; "2 players"
0100   D7BC AF           xor a
0101   D7BD 32 33 C1     ld (stlevel),a        ; When starting a new game, stLevel and stHigh
0102   D7C0 32 39 C1     ld (sthigh),a	       ; will be reset
0103   D7C3 3C           inc a
0104   D7C4 32 2F C1     ld (players),a        ; Default option, 1 player
0105   D7C7             ChoosePlayers:
0106   D7C7 3A 2F C1     ld a,(players)
0107   D7CA 26 05        ld h,$05
0108   D7CC F5           push af
0109   D7CD C6 03        add a,3
0110   D7CF 6F           ld l,a
0111   D7D0 3E 05        ld a,5
0112   D7D2 22 0F C0     ld ($C00F),hl
0113   D7D5 CD 2B 4A     call _putc	       ; Put the small arrow
0114   D7D8 F1           pop af
0115   D7D9 26 05        ld h,$05
0116   D7DB D6 06        sub 6
0117   D7DD ED 44        neg
0118   D7DF 6F           ld l,a
0119   D7E0 3E 20        ld a,32
0120   D7E2 22 0F C0     ld ($C00F),hl
0121   D7E5 CD 2B 4A     call _putc	       ; And remove it from the other position
0122   D7E8             WKCP:
0123   D7E8 CD 71 53     call GET_KEY
0124   D7EB 21 2F C1     ld hl,players
0125   D7EE FE 37        cp K_EXIT
0126   D7F0 CA 10 E1     jp z,Quit
0127   D7F3 FE 09        cp K_ENTER
0128   D7F5 28 1E        jr z,LevelChoose
0129   D7F7 FE 04        cp K_UP
0130   D7F9 28 0E        jr z,ChangePlayers
0131   D7FB FE 01        cp K_DOWN
0132   D7FD 28 0A        jr z,ChangePlayers
0133   D7FF FE 22        cp K_1
0134   D801 28 0C        jr z,OnePlayer
0135   D803 FE 1A        cp K_2
0136   D805 28 0C        jr z,TwoPlayers
0137   D807 18 DF        jr WKCP
0138   D809             ChangePlayers:
0139   D809 7E           ld a,(hl)
0140   D80A EE 03        xor 3		       ; This will turn 1 -> 2 and 2 -> 1
0141   D80C 77           ld (hl),a
0142   D80D 18 B8        jr ChoosePlayers
0143   D80F             OnePlayer:
0144   D80F 36 01        ld (hl),1
0145   D811 18 02        jr LevelChoose
0146   D813             TwoPlayers:
0147   D813 36 02        ld (hl),2
0148   D815             LevelChoose:
0149   D815 CD 73 E0     call ShowFrame
0150   D818 3A 33 C1     ld a,(stlevel)
0151   D81B 32 25 C1     ld (level),a	       ; The cursor will start at the last played level
0152   D81E 3A 39 C1     ld a,(sthigh)
0153   D821 32 3A C1     ld (high),a	       ; And with the high
0154   D824 AF           xor a
0155   D825             NewDigit:
0156   D825 CD 81 D7     call PutDigit	       ; Put all digits, 0-9
0157   D828 3C           inc a
0158   D829 FE 0A        cp 10
0159   D82B 20 F8        jr nz,NewDigit
0160   D82D 21 02 0E     ld hl,$0E02
0161   D830 22 0F C0     ld ($C00F),hl
0162   D833 21 63 E4     ld hl,HighTxt
0163   D836 CD 37 4A     call _puts	       ; "High"
0164   D839 3A 2F C1     ld a,(players)
0165   D83C 3D           dec a		       ; Check if the hiscore should be shown
0166   D83D 20 2C        jr nz,Show2PlayOpt    ; or two player options
0167   D83F 21 78 E3     ld hl,Hiscore
0168   D842 3E 24        ld a,$24
0169   D844 06 03        ld b,3
0170   D846             NewPos:
0171   D846 1E 18        ld e,$18
0172   D848 57           ld d,a
0173   D849 C6 06        add a,6
0174   D84B ED 53 7C C3  ld ($C37C),de
0175   D84F F5           push af
0176   D850 C5           push bc
0177   D851 CD A5 4A     call _vputs	       ; Show name
0178   D854 3E 52        ld a,$52
0179   D856 32 7C C3     ld ($C37C),a
0180   D859 06 05        ld b,5
0181   D85B E5           push hl
0182   D85C CD 10 40     call LD_HL_MHL        ; Get that persons score
0183   D85F CD 19 DF     call DM_HL_Deci       ; And show it (internal routine)
0184   D862 E1           pop hl
0185   D863 23           inc hl
0186   D864 23           inc hl 	       ; HL -> next hiscore table entry
0187   D865 C1           pop bc
0188   D866 F1           pop af
0189   D867 10 DD        djnz NewPos
0190   D869 18 37        jr WaitKey
0191   D86B             Show2PlayOpt:
0192   D86B 21 05 02     ld hl,$0205
0193   D86E 22 0F C0     ld ($C00F),hl
0194   D871 E5           push hl
0195   D872 21 68 E4     ld hl,SLTxt
0196   D875 CD 37 4A     call _puts	       ; "Send 2-4 lines"
0197   D878 21 06 02     ld hl,$0206
0198   D87B 22 0F C0     ld ($C00F),hl
0199   D87E E5           push hl
0200   D87F 21 E8 E2     ld hl,Infotext+12
0201   D882 CD 37 4A     call D_ZT_STR	       ; "Lines "
0202   D885 E1           pop hl
0203   D886 22 0F C0     ld ($C00F),hl
0204   D889 FD CB 05 DE  set 3,(iy+5)
0205   D88D 3E 4C        ld a,76
0206   D88F CD 2B 4A     call _putc	       ; Invert the 'S'
0207   D892 E1           pop hl
0208   D893 22 0F C0     ld ($C00F),hl
0209   D896 3E 53        ld a,83
0210   D898 CD 2B 4A     call _putc	       ; And the 'L'
0211   D89B AF           xor a
0212   D89C 32 32 C1     ld (declines),a       ; Clear the flags to the two option above
0213   D89F 32 36 C1     ld (scrflag),a
0214   D8A2             WaitKey:
0215   D8A2 3A 25 C1     ld a,(level)
0216   D8A5 FD CB 05 DE  set 3,(iy+5)
0217   D8A9 CD 81 D7     call PutDigit	       ; Invert the starting level digit
0218   D8AC FD CB 05 9E  res 3,(iy+5)
0219   D8B0 3A 3A C1     ld a,(high)
0220   D8B3 21 03 10     ld hl,$1003
0221   D8B6 22 0F C0     ld ($C00F),hl
0222   D8B9 C6 30        add a,48
0223   D8BB CD 2B 4A     call _putc	       ; And show the High
0224   D8BE 3A 2F C1     ld a,(players)
0225   D8C1 3D           dec a		       ; If two players, the two players options
0226   D8C2 28 16        jr z,GetKey	       ; should be shown as well
0227   D8C4 21 06 08     ld hl,$0806
0228   D8C7 22 0F C0     ld ($C00F),hl
0229   D8CA 21 7F E4     ld hl,ScrambleTxt
0230   D8CD 3A 36 C1     ld a,(scrflag)
0231   D8D0 B7           or a
0232   D8D1 28 04        jr z,ShowScrFlag
0233   D8D3 11 0C 00     ld de,12
0234   D8D6 19           add hl,de
0235   D8D7             ShowScrFlag:
0236   D8D7 CD 37 4A     call D_ZT_STR	       ; Show "scrambled" or "unscrambled"
0237   D8DA             GetKey:
0238   D8DA CD 71 53     call GET_KEY
0239   D8DD B7           or a
0240   D8DE 28 FA        jr z,GetKey
0241   D8E0 FE 37        cp K_EXIT
0242   D8E2 CA 10 E1     jp z,Quit
0243   D8E5 FE 09        cp K_ENTER
0244   D8E7 CA 67 D9     jp z,StartGame
0245   D8EA FE 32        cp K_F4
0246   D8EC 28 36        jr z,DecHigh
0247   D8EE FE 31        cp K_F5
0248   D8F0 28 3E        jr z,IncHigh
0249   D8F2 FE 24        cp K_7
0250   D8F4 28 68        jr z,ChangeScrFlag
0251   D8F6 FE 13        cp K_6
0252   D8F8 20 1C        jr nz,CheckLevChg
0253   D8FA 3A 32 C1     ld a,(declines)
0254   D8FD EE 01        xor 1		       ; Change the declines flag (1-3 or 2-4)
0255   D8FF 32 32 C1     ld (declines),a
0256   D902 87           add a,a
0257   D903 87           add a,a
0258   D904 21 05 07     ld hl,$0705
0259   D907 22 0F C0     ld ($C00F),hl
0260   D90A 21 77 E4     ld hl,NLTxt
0261   D90D 16 00        ld d,0
0262   D90F 5F           ld e,a
0263   D910 19           add hl,de
0264   D911 CD 37 4A     call _puts	       ; Update it on the screen
0265   D914             ToWaitKey:	       ; This label is to avoid JPs below (saves a few bytes)
0266   D914 18 8C        jr WaitKey
0267   D916             CheckLevChg:
0268   D916 3D           dec a
0269   D917 28 24        jr z,ChangeRow
0270   D919 3D           dec a
0271   D91A 28 36        jr z,LevLeft
0272   D91C 3D           dec a
0273   D91D 28 39        jr z,LevRight
0274   D91F 3D           dec a
0275   D920 20 80        jr nz,WaitKey
0276   D922 18 19        jr ChangeRow
0277   D924             
0278   D924             DecHigh:
0279   D924 3A 3A C1     ld a,(high)
0280   D927 B7           or a
0281   D928 28 B0        jr z,GetKey	       ; Don't decrease if high is 0
0282   D92A 3D           dec a
0283   D92B 32 3A C1     ld (high),a
0284   D92E 18 E4        jr ToWaitKey
0285   D930             
0286   D930             IncHigh:
0287   D930 3A 3A C1     ld a,(high)
0288   D933 FE 05        cp 5
0289   D935 28 A3        jr z,GetKey	       ; Don't increase if high is 5
0290   D937 3C           inc a
0291   D938 32 3A C1     ld (high),a
0292   D93B 18 D7        jr ToWaitKey
0293   D93D             
0294   D93D             ChangeRow:
0295   D93D 3A 25 C1     ld a,(level)
0296   D940 C6 05        add a,5	       ; Changing row is like adding with 5, mod 10
0297   D942             ChkLevEdges:
0298   D942 27           daa		       ; Modulo 10 (sort of)
0299   D943 E6 0F        and $0F
0300   D945             SetLevel:
0301   D945 47           ld b,a
0302   D946 3A 25 C1     ld a,(level)
0303   D949 CD 81 D7     call PutDigit	       ; Remove the inverted digit
0304   D94C 78           ld a,b
0305   D94D 32 25 C1     ld (level),a	       ; And set the new level
0306   D950 18 C2        jr ToWaitKey
0307   D952             LevLeft:
0308   D952 3A 25 C1     ld a,(level)
0309   D955 3D           dec a
0310   D956 18 EA        jr ChkLevEdges
0311   D958             LevRight:
0312   D958 3A 25 C1     ld a,(level)
0313   D95B 3C           inc a
0314   D95C 18 E4        jr ChkLevEdges
0315   D95E             
0316   D95E             ChangeScrFlag:
0317   D95E 21 36 C1     ld hl,scrflag
0318   D961 7E           ld a,(hl)
0319   D962 EE 01        xor 1
0320   D964 77           ld (hl),a
0321   D965 18 AD        jr ToWaitKey
0322   D967             
0323   D967             StartGame:
0324   D967 3A 25 C1     ld a,(level)
0325   D96A 32 33 C1     ld (stlevel),a        ; Copy the selected level and high so they will
0326   D96D 3A 3A C1     ld a,(high)	       ; be default next time
0327   D970 32 39 C1     ld (sthigh),a
0328   D973 3A 2F C1     ld a,(players)
0329   D976 3D           dec a
0330   D977 28 23        jr z,NoWait
0331   D979 AF           xor a
0332   D97A 32 34 C1     ld (lastbar),a
0333   D97D             
0334   D97D CD 73 E0     call ShowFrame
0335   D980 21 04 05     ld hl,$0504
0336   D983 22 0F C0     ld ($C00F),hl
0337   D986 21 27 E4     ld hl,WaitTxt
0338   D989 CD 37 4A     call _puts	       ; "* WAITING *"
0339   D98C             
0340   D98C CD 50 E1     call ReceiveByte
0341   D98F B7           or a
0342   D990 20 0A        jr nz,NoWait	       ; If byte gotten, the other calc was waiting
0343   D992 3E 01        ld a,1
0344   D994 32 35 C1     ld (hsflag),a	       ; This will allow the user to cancel with EXIT
0345   D997 3E AA        ld a,$AA
0346   D999 CD 91 E1     call SendByte	       ; Else wait until the other calc responds
0347   D99C             
0348   D99C             NoWait:
0349   D99C AF           xor a
0350   D99D 32 35 C1     ld (hsflag),a
0351   D9A0 32 38 C1     ld (sbyte),a	       ; This is a linkbuffer byte
0352   D9A3 CD 7E 4A     call _clrLCD
0353   D9A6 CD E8 DE     call RandP	       ; Randomize the first piece
0354   D9A9             
0355   D9A9 21 FF FF     ld hl,$FFFF
0356   D9AC 22 AD CF     ld (board+2),hl
0357   D9AF 21 AF CF     ld hl,board+4
0358   D9B2 06 12        ld b,18
0359   D9B4             InitRow:	       ; Setting up the border aroudn the well
0360   D9B4 36 07        ld (hl),%00000111
0361   D9B6 23           inc hl
0362   D9B7 36 E0        ld (hl),%11100000
0363   D9B9 23           inc hl
0364   D9BA 10 F8        djnz InitRow
0365   D9BC             
0366   D9BC CD 96 E0     call ShowLayout
0367   D9BF 21 3B C1     ld hl,linkcnt	       ; This counter decrease every frame. When 0,
0368   D9C2 36 0A        ld (hl),10	       ; check link port. If too often check, it slows down
0369   D9C4 3A 2F C1     ld a,(players)
0370   D9C7 3D           dec a
0371   D9C8 3E 00        ld a,0 	       ; Can't use 'xor a' here! It would affect the Z flag
0372   D9CA C4 0A DB     call nz,ShowBar       ; Show the bar at height 0
0373   D9CD             ResetVars:
0374   D9CD AF           xor a
0375   D9CE 32 1A C1     ld (flags),a	       ; Clear a lot of vars
0376   D9D1 32 FB C0     ld (cBit),a
0377   D9D4 21 00 00     ld hl,0
0378   D9D7 22 21 C1     ld (score),hl
0379   D9DA 22 23 C1     ld (scoreU),hl        ; Clears lines as well
0380   D9DD CD C1 DD     call NewB	       ; Prepares a new piece
0381   D9E0 3A 3A C1     ld a,(high)
0382   D9E3 B7           or a
0383   D9E4 28 0F        jr z,MainLoop
0384   D9E6 21 36 C1     ld hl,scrflag	       ; If starting with trash lines, they should
0385   D9E9 46           ld b,(hl)	       ; always be scrambled even though the option
0386   D9EA C5           push bc	       ; unscrambled is set
0387   D9EB E5           push hl
0388   D9EC 36 01        ld (hl),1	       ; So temporary set it to scrambled lines
0389   D9EE 87           add a,a	       ; No trash lines = high*2
0390   D9EF CD 2A DB     call AddLines	       ; Create trash lines
0391   D9F2 E1           pop hl
0392   D9F3 C1           pop bc
0393   D9F4 70           ld (hl),b	       ; And reset the scrflag
0394   D9F5             
0395   D9F5             MainLoop:	       ; The main loop
0396   D9F5 21 F7 E2     ld hl,levelcnts
0397   D9F8 3A 25 C1     ld a,(level)
0398   D9FB 16 00        ld d,0
0399   D9FD 5F           ld e,a
0400   D9FE 19           add hl,de
0401   D9FF 7E           ld a,(hl)	       ; A = the delay time of the current level
0402   DA00 32 1E C1     ld (counter),a
0403   DA03             DelayLoop:
0404   DA03 21 1A C1     ld hl,flags
0405   DA06 CB 8E        res 1,(hl)	       ; Clear the update flag
0406   DA08 CD 71 53     call GET_KEY
0407   DA0B FE 37        cp K_EXIT
0408   DA0D CA 09 DC     jp z,AbortGame
0409   DA10 FE 38        cp K_MORE
0410   DA12 CA D6 DA     jp z,Pause
0411   DA15 FE 36        cp K_SECOND
0412   DA17 28 7F        jr z,Rotate
0413   DA19 FE 30        cp K_ALPHA
0414   DA1B CA 9E DA     jp z,RotateBack
0415   DA1E FE 20        cp K_DEL
0416   DA20 CA B6 DA     jp z,TeacherKey
0417   DA23 FE 28        cp K_XVAR
0418   DA25 28 7D        jr z,Drop
0419   DA27 3D           dec a
0420   DA28 28 29        jr z,MoveDown
0421   DA2A 3D           dec a
0422   DA2B 28 60        jr z,MoveLeft
0423   DA2D 3D           dec a
0424   DA2E 28 57        jr z,MoveRight
0425   DA30 3D           dec a
0426   DA31 28 65        jr z,Rotate
0427   DA33             Wait:
0428   DA33 21 1A C1     ld hl,flags
0429   DA36 CB 46        bit 0,(hl)	       ; Check if the player became gameover this frame
0430   DA38 C2 10 DC     jp nz,GameOver
0431   DA3B CB 4E        bit 1,(hl)	       ; Check if anything happened (movements)
0432   DA3D C4 9D DB     call nz,Update        ; If so, update that
0433   DA40 76           halt
0434   DA41 76           halt		       ; Halt is the best way to delay
0435   DA42 76           halt		       ; The interrupt speed is the same on turboed calcs
0436   DA43 76           halt
0437   DA44 21 3B C1     ld hl,linkcnt
0438   DA47 35           dec (hl)
0439   DA48 CC C9 DB     call z,GetLinkInfo    ; If the link counter reaches zero, check link port
0440   DA4B 21 1E C1     ld hl,counter
0441   DA4E 35           dec (hl)	       ; Decrease the counter
0442   DA4F 20 B2        jr nz,DelayLoop       ; If not zero, check for keys again
0443   DA51 18 04        jr FallDown
0444   DA53             MoveDown:
0445   DA53 21 23 C1     ld hl,scoreU
0446   DA56 34           inc (hl)	       ; When DOWN is pressed, increase the score
0447   DA57             FallDown:
0448   DA57 CD C9 DB     call GetLinkInfo      ; Before moving down, always check linkport
0449   DA5A 21 1B C1     ld hl,newXY
0450   DA5D 35           dec (hl)	       ; Decrease the y coordinate
0451   DA5E CD 9D DB     call Update	       ; Check if possible
0452   DA61 CA F5 D9     jp z,MainLoop	       ; If so, repeat mainloop
0453   DA64             BotReached:
0454   DA64 21 01 C1     ld hl,cB	       ; Else the bottom is reached
0455   DA67 ED 5B FF C0  ld de,(cXY)
0456   DA6B 06 04        ld b,4
0457   DA6D             StoreB: 	       ; Store the piece in the well
0458   DA6D E5           push hl
0459   DA6E CD 10 40     call LD_HL_MHL
0460   DA71 19           add hl,de
0461   DA72 CD 55 DF     call PutCoord
0462   DA75 E1           pop hl
0463   DA76 23           inc hl
0464   DA77 23           inc hl
0465   DA78 10 F3        djnz StoreB
0466   DA7A 3A 2F C1     ld a,(players)
0467   DA7D 3D           dec a
0468   DA7E C4 50 DD     call nz,CheckBar      ; If two player, check your highest line
0469   DA81 CD C1 DD     call NewB	       ; Last, randomize a new piece
0470   DA84 C3 F5 D9     jp MainLoop
0471   DA87             
0472   DA87             MoveRight:
0473   DA87 21 1C C1     ld hl,newXY+1
0474   DA8A 34           inc (hl)	       ; Increase X coordinate
0475   DA8B 18 04        jr SetUpdateFlag      ; Set update flag
0476   DA8D             
0477   DA8D             MoveLeft:
0478   DA8D 21 1C C1     ld hl,newXY+1
0479   DA90 35           dec (hl)	       ; Decrease left coordinate
0480   DA91             SetUpdateFlag:
0481   DA91 21 1A C1     ld hl,flags
0482   DA94 CB CE        set 1,(hl)	       ; Set update flag
0483   DA96 18 9B        jr Wait
0484   DA98             
0485   DA98             Rotate:
0486   DA98 21 1D C1     ld hl,newRot
0487   DA9B 34           inc (hl)
0488   DA9C 18 F3        jr SetUpdateFlag
0489   DA9E             
0490   DA9E             RotateBack:
0491   DA9E 21 1D C1     ld hl,newRot
0492   DAA1 35           dec (hl)
0493   DAA2 18 ED        jr SetUpdateFlag
0494   DAA4             
0495   DAA4             Drop:
0496   DAA4 21 23 C1     ld hl,scoreU	       ; When dropping, increase score with the
0497   DAA7 34           inc (hl)	       ; number of fallen steps
0498   DAA8 21 1B C1     ld hl,newXY
0499   DAAB 35           dec (hl)	       ; Decrease Y coordinate
0500   DAAC CD 9D DB     call Update	       ; Update it on screen
0501   DAAF 28 F3        jr z,Drop	       ; If OK, move down again
0502   DAB1 CD C9 DB     call GetLinkInfo      ; Get link info
0503   DAB4 18 AE        jr BotReached	       ; Bottom reached, store piece.
0504   DAB6             
0505   DAB6             TeacherKey:
0506   DAB6 3A 2F C1     ld a,(players)
0507   DAB9 3D           dec a
0508   DABA C2 33 DA     jp nz,Wait	       ; If two players, teacher key not allowed
0509   DABD 3C           inc a
0510   DABE 11 0C E3     ld de,Resume
0511   DAC1 12           ld (de),a	       ; Set the resume flag
0512   DAC2 13           inc de
0513   DAC3 21 F9 C0     ld hl,cBitOfs
0514   DAC6 01 43 00     ld bc,67	       ; Copy all variables
0515   DAC9 ED B0        ldir
0516   DACB 21 AB CF     ld hl,board
0517   DACE 01 28 00     ld bc,40
0518   DAD1 ED B0        ldir		       ; And the well
0519   DAD3 C3 10 E1     jp Quit	       ; And quit the game
0520   DAD6             
0521   DAD6             Pause:
0522   DAD6 3A 2F C1     ld a,(players)
0523   DAD9 3D           dec a
0524   DADA C2 33 DA     jp nz,Wait	       ; Pause not allowed in two player game
0525   DADD CD 73 E0     call ShowFrame
0526   DAE0 21 04 06     ld hl,$0604
0527   DAE3 22 0F C0     ld ($C00F),hl
0528   DAE6 21 1D E4     ld hl,PauseTxt
0529   DAE9 CD 37 4A     call _puts	       ; "* PAUSE *"
0530   DAEC             PauseWait:
0531   DAEC CD 71 53     call GET_KEY
0532   DAEF B7           or a
0533   DAF0 28 FA        jr z,PauseWait
0534   DAF2 CD 96 E0     call ShowLayout       ; Show all stuff again
0535   DAF5 CD AC DE     call ShowInfo
0536   DAF8 CD 57 E0     call ShowWell
0537   DAFB CD 6F DD     call ShowCurB
0538   DAFE 11 05 FC     ld de,$FC05
0539   DB01 21 11 C1     ld hl,cB+16
0540   DB04 CD 76 DD     call ShowB	       ; And the next piece
0541   DB07 C3 33 DA     jp Wait	       ; Resume the game
0542   DB0A             
0543   DB0A             ShowBar:	       ; Show the bar
0544   DB0A 32 34 C1     ld (lastbar),a
0545   DB0D 21 FB FF     ld hl,$FFFB
0546   DB10 11 F0 FF     ld de,-16
0547   DB13 06 40        ld b,64
0548   DB15 87           add a,a
0549   DB16 87           add a,a
0550   DB17             SB_Rep:
0551   DB17 4F           ld c,a
0552   DB18 3E 0F        ld a,$0F
0553   DB1A A6           and (hl)
0554   DB1B 77           ld (hl),a
0555   DB1C 79           ld a,c
0556   DB1D B7           or a
0557   DB1E 28 05        jr z,ClearBar
0558   DB20 3E 60        ld a,$60
0559   DB22 B6           or (hl)
0560   DB23 77           ld (hl),a
0561   DB24 0D           dec c
0562   DB25             ClearBar:
0563   DB25 79           ld a,c
0564   DB26 19           add hl,de
0565   DB27 10 EE        djnz SB_Rep
0566   DB29 C9           ret
0567   DB2A             
0568   DB2A             AddLines:	       ; Add A lines, scrambled or unscrambled
0569   DB2A 47           ld b,a
0570   DB2B C5           push bc
0571   DB2C 48           ld c,b
0572   DB2D 06 00        ld b,0
0573   DB2F CB 21        sla c
0574   DB31 11 CD CF     ld de,board+34
0575   DB34 62           ld h,d
0576   DB35 6B           ld l,e
0577   DB36 ED 42        sbc hl,bc
0578   DB38 3E 20        ld a,32
0579   DB3A 91           sub c
0580   DB3B 06 00        ld b,0
0581   DB3D 4F           ld c,a
0582   DB3E ED B8        lddr
0583   DB40 C1           pop bc
0584   DB41 78           ld a,b
0585   DB42 F5           push af
0586   DB43 3E 0A        ld a,10
0587   DB45 CD C9 DF     call Random
0588   DB48 32 37 C1     ld (gap),a
0589   DB4B 21 AF CF     ld hl,board+4
0590   DB4E             AddTrashRow:
0591   DB4E C5           push bc
0592   DB4F 11 FF FF     ld de,$FFFF
0593   DB52 E5           push hl
0594   DB53 06 05        ld b,5
0595   DB55             Holes:
0596   DB55 C5           push bc
0597   DB56 21 FB FF     ld hl,$FFFB
0598   DB59 3A 36 C1     ld a,(scrflag)
0599   DB5C B7           or a
0600   DB5D 20 05        jr nz,RandGap
0601   DB5F 3A 37 C1     ld a,(gap)
0602   DB62 18 05        jr PutGap
0603   DB64             RandGap:
0604   DB64 3E 0A        ld a,10
0605   DB66 CD C9 DF     call Random
0606   DB69             PutGap:
0607   DB69 47           ld b,a
0608   DB6A 04           inc b
0609   DB6B             RotWord:
0610   DB6B CB 35        .db $CB,$35	       ; SLL L - an undocumented Z80 instruction
0611   DB6D CB 14        rl h
0612   DB6F 10 FA        djnz RotWord
0613   DB71 C1           pop bc
0614   DB72 7A           ld a,d
0615   DB73 A4           and h
0616   DB74 57           ld d,a
0617   DB75 7B           ld a,e
0618   DB76 A5           and l
0619   DB77 5F           ld e,a
0620   DB78 10 DB        djnz Holes
0621   DB7A E1           pop hl
0622   DB7B 73           ld (hl),e
0623   DB7C 23           inc hl
0624   DB7D 72           ld (hl),d
0625   DB7E 23           inc hl
0626   DB7F C1           pop bc
0627   DB80 10 CC        djnz AddTrashRow
0628   DB82 21 1B C1     ld hl,newXY
0629   DB85 F1           pop af
0630   DB86 86           add a,(hl)
0631   DB87 FE 10        cp $10
0632   DB89 38 02        jr c,TopNotReached
0633   DB8B 3E 10        ld a,$10
0634   DB8D             TopNotReached:
0635   DB8D 77           ld (hl),a
0636   DB8E CD 9D DB     call Update
0637   DB91 F5           push af
0638   DB92 CD 57 E0     call ShowWell
0639   DB95 CD 6F DD     call ShowCurB
0640   DB98 F1           pop af
0641   DB99 C2 10 DC     jp nz,GameOver
0642   DB9C C9           ret
0643   DB9D             
0644   DB9D             Update: 	       ; Update the piece on the screen.
0645   DB9D CD 9D DD     call TestNewB	       ; Return NZ if not possible move
0646   DBA0 20 18        jr nz,Sync
0647   DBA2 CD 86 DD     call EraseCurB
0648   DBA5 2A 1B C1     ld hl,(newXY)
0649   DBA8 22 FF C0     ld (cXY),hl
0650   DBAB 3A 1D C1     ld a,(newRot)
0651   DBAE 32 19 C1     ld (cRot),a
0652   DBB1 06 00        ld b,0
0653   DBB3 CD 2B DF     call Uncrunch
0654   DBB6 CD 6F DD     call ShowCurB
0655   DBB9 AF           xor a
0656   DBBA             Sync:
0657   DBBA F5           push af
0658   DBBB 2A FF C0     ld hl,(cXY)
0659   DBBE 22 1B C1     ld (newXY),hl
0660   DBC1 3A 19 C1     ld a,(cRot)
0661   DBC4 32 1D C1     ld (newRot),a
0662   DBC7 F1           pop af
0663   DBC8 C9           ret
0664   DBC9             
0665   DBC9             GetLinkInfo:	       ; Fins out what happens to the opponent
0666   DBC9 21 3B C1     ld hl,linkcnt
0667   DBCC 36 0A        ld (hl),10	       ; Reset the link counter
0668   DBCE 3A 2F C1     ld a,(players)
0669   DBD1 3D           dec a
0670   DBD2 C8           ret z		       ; If one player, leave this routine
0671   DBD3 CD 50 E1     call ReceiveByte      ; Get a byte
0672   DBD6 B7           or a
0673   DBD7 28 28        jr z,CheckSByte       ; If no byte received, check if a byte should be sent
0674   DBD9 47           ld b,a
0675   DBDA E6 0F        and $0F
0676   DBDC 4F           ld c,a
0677   DBDD 78           ld a,b
0678   DBDE CB 3F        srl a
0679   DBE0 CB 3F        srl a
0680   DBE2 CB 3F        srl a
0681   DBE4 CB 3F        srl a
0682   DBE6 FE 0F        cp $0F
0683   DBE8 28 12        jr z,PenaltyRows
0684   DBEA FE 0C        cp $0C
0685   DBEC CA 50 DC     jp z,YouWinP
0686   DBEF FE 0D        cp $0D
0687   DBF1 28 05        jr z,UpdateBar
0688   DBF3 FE 0E        cp $0E
0689   DBF5 C0           ret nz
0690   DBF6 0E 10        ld c,16
0691   DBF8             UpdateBar:
0692   DBF8 79           ld a,c
0693   DBF9 C3 0A DB     jp ShowBar
0694   DBFC             PenaltyRows:
0695   DBFC 79           ld a,c
0696   DBFD 3C           inc a
0697   DBFE C3 2A DB     jp AddLines
0698   DC01             
0699   DC01             CheckSByte:
0700   DC01 3A 38 C1     ld a,(sbyte)	       ; Check if byte in send buffer
0701   DC04 B7           or a
0702   DC05 C4 91 E1     call nz,SendByte      ; If so, send it
0703   DC08 C9           ret
0704   DC09             
0705   DC09             AbortGame:
0706   DC09 3A 2F C1     ld a,(players)
0707   DC0C 3D           dec a
0708   DC0D CA 77 DC     jp z,CheckHiscore     ; If one player abort, check hiscore table
0709   DC10             
0710   DC10             GameOver:
0711   DC10 3A 2F C1     ld a,(players)
0712   DC13 3D           dec a
0713   DC14 28 14        jr z,FlashGameOver    ; If a two player game, send a byte telling
0714   DC16 3E C0        ld a,$C0	       ; that you lost
0715   DC18 06 03        ld b,3
0716   DC1A             SendWinByte:
0717   DC1A C5           push bc
0718   DC1B CD 91 E1     call SendByte
0719   DC1E CD 50 E1     call ReceiveByte      ; This is for clearing up stuff (if both sent
0720   DC21 3A 38 C1     ld a,(sbyte)	       ; at the same time)
0721   DC24 B7           or a
0722   DC25 C1           pop bc
0723   DC26 28 02        jr z,FlashGameOver
0724   DC28 10 F0        djnz SendWinByte
0725   DC2A             FlashGameOver:
0726   DC2A CD 71 53     call GET_KEY
0727   DC2D FE 09        cp K_ENTER
0728   DC2F 28 46        jr z,CheckHiscore
0729   DC31 FE 37        cp K_EXIT
0730   DC33 28 42        jr z,CheckHiscore
0731   DC35 FD 7E 05     ld a,(iy+5)
0732   DC38 EE 08        xor 8
0733   DC3A FD 77 05     ld (iy+5),a
0734   DC3D 21 03 05     ld hl,$0503
0735   DC40 22 0F C0     ld ($C00F),hl
0736   DC43 21 07 E4     ld hl,GameOverText
0737   DC46 CD 37 4A     call _puts
0738   DC49 06 1E        ld b,30
0739   DC4B             FlashWait:
0740   DC4B 76           halt
0741   DC4C 10 FD        djnz FlashWait
0742   DC4E 18 DA        jr FlashGameOver
0743   DC50             
0744   DC50             YouWinP:
0745   DC50 E1           pop hl
0746   DC51             YouWin:
0747   DC51 CD 71 53     call GET_KEY
0748   DC54 FE 09        cp K_ENTER
0749   DC56 28 1F        jr z,CheckHiscore
0750   DC58 FE 37        cp K_EXIT
0751   DC5A 28 1B        jr z,CheckHiscore
0752   DC5C FD 7E 05     ld a,(iy+5)
0753   DC5F EE 08        xor 8
0754   DC61 FD 77 05     ld (iy+5),a
0755   DC64 21 03 06     ld hl,$0603
0756   DC67 22 0F C0     ld ($C00F),hl
0757   DC6A 21 13 E4     ld hl,WinTxt
0758   DC6D CD 37 4A     call _puts
0759   DC70 06 1E        ld b,30
0760   DC72             WFlashWait:
0761   DC72 76           halt
0762   DC73 10 FD        djnz WFlashWait
0763   DC75 18 DA        jr YouWin
0764   DC77             
0765   DC77             CheckHiscore:
0766   DC77 3A 2F C1     ld a,(players)
0767   DC7A 3D           dec a
0768   DC7B C2 15 D8     jp nz,LevelChoose     ; No hiscore when two players
0769   DC7E 21 86 E3     ld hl,Hiscore+14      ; HL -> hiscore
0770   DC81 ED 5B 21 C1  ld de,(score)	       ; DE = your score
0771   DC85 06 03        ld b,3
0772   DC87             CheckP:
0773   DC87 E5           push hl
0774   DC88 CD 10 40     call LD_HL_MHL
0775   DC8B CD 3C 40     call CP_HL_DE
0776   DC8E E1           pop hl
0777   DC8F 38 0B        jr c,ScoreGreater
0778   DC91 D5           push de
0779   DC92 11 10 00     ld de,16
0780   DC95 19           add hl,de	       ; HL -> next score in hiscore table
0781   DC96 D1           pop de
0782   DC97 10 EE        djnz CheckP
0783   DC99 C3 15 D8     jp LevelChoose        ; Not in hiscore table
0784   DC9C             ScoreGreater:
0785   DC9C 3E 04        ld a,4
0786   DC9E 90           sub b
0787   DC9F 32 2C C1     ld (place),a
0788   DCA2 FE 03        cp 3		       ; If last place, no moves in hiscore table
0789   DCA4 28 15        jr z,MoveDone
0790   DCA6 21 8B E3     ld hl,Hiscore+19
0791   DCA9             MoveAgain:	       ; Else move the other people down
0792   DCA9 54           ld d,h
0793   DCAA 5D           ld e,l
0794   DCAB 01 10 00     ld bc,16
0795   DCAE 09           add hl,bc
0796   DCAF EB           ex de,hl
0797   DCB0 01 0D 00     ld bc,13
0798   DCB3 ED B0        ldir
0799   DCB5 21 7B E3     ld hl,Hiscore+3
0800   DCB8 3D           dec a
0801   DCB9 28 EE        jr z,MoveAgain
0802   DCBB             MoveDone:
0803   DCBB 3A 2C C1     ld a,(place)	       ; Find out where to enter your name
0804   DCBE 21 7B E3     ld hl,Hiscore+3
0805   DCC1 11 10 00     ld de,16
0806   DCC4 3D           dec a
0807   DCC5 28 05        jr z,EnterName
0808   DCC7 19           add hl,de
0809   DCC8 3D           dec a
0810   DCC9 28 01        jr z,EnterName
0811   DCCB 19           add hl,de
0812   DCCC             EnterName:
0813   DCCC E5           push hl
0814   DCCD 06 0A        ld b,10
0815   DCCF             RepClear:
0816   DCCF 36 20        ld (hl),32	       ; Clear the previous name
0817   DCD1 23           inc hl
0818   DCD2 10 FB        djnz RepClear
0819   DCD4 23           inc hl
0820   DCD5 ED 5B 21 C1  ld de,(score)
0821   DCD9 73           ld (hl),e	       ; Put your score in the table
0822   DCDA 23           inc hl
0823   DCDB 72           ld (hl),d
0824   DCDC CD 73 E0     call ShowFrame
0825   DCDF 21 10 12     ld hl,$1210
0826   DCE2 22 7C C3     ld ($C37C),hl
0827   DCE5 21 33 E4     ld hl,EnterText
0828   DCE8 CD A5 4A     call _vputs	       ; "You entered ..."
0829   DCEB 11 26 19     ld de,$1926
0830   DCEE ED 53 7C C3  ld ($C37C),de
0831   DCF2 CD A5 4A     call _vputs	       ; "Enter your name"
0832   DCF5 21 05 05     ld hl,$0505
0833   DCF8 22 0F C0     ld ($C00F),hl
0834   DCFB E1           pop hl
0835   DCFC 06 00        ld b,0 	       ; B = number of letters entered so far
0836   DCFE             
0837   DCFE             WaK:		       ; A simple string input routine follows
0838   DCFE E5           push hl
0839   DCFF C5           push bc	       ; GET_KEY destroys B. It doesn't on the TI-85 :-/
0840   DD00 CD 71 53     call GET_KEY
0841   DD03 C1           pop bc
0842   DD04 FE 02        cp $02
0843   DD06 28 2D        jr z,BackSpace
0844   DD08 FE 09        cp $09
0845   DD0A 28 40        jr z,NameDone
0846   DD0C FE 11        cp $11
0847   DD0E 20 05        jr nz,CheckLetter
0848   DD10 3E 20        ld a,32
0849   DD12 E1           pop hl
0850   DD13 18 11        jr PutLetter
0851   DD15             CheckLetter:
0852   DD15 21 97 E4     ld hl,Letters
0853   DD18 C5           push bc
0854   DD19 01 1A 00     ld bc,26
0855   DD1C ED B1        cpir
0856   DD1E 51           ld d,c
0857   DD1F C1           pop bc
0858   DD20 E1           pop hl
0859   DD21 20 DB        jr nz,WaK
0860   DD23 3E 41        ld a,65
0861   DD25 82           add a,d
0862   DD26             PutLetter:
0863   DD26 4F           ld c,a
0864   DD27 78           ld a,b
0865   DD28 FE 0A        cp 10
0866   DD2A 28 D2        jr z,WaK
0867   DD2C 71           ld (hl),c
0868   DD2D 23           inc hl
0869   DD2E 04           inc b
0870   DD2F 79           ld a,c
0871   DD30 CD 2B 4A     call _putc
0872   DD33 18 C9        jr WaK
0873   DD35             BackSpace:
0874   DD35 E1           pop hl
0875   DD36 78           ld a,b
0876   DD37 B7           or a
0877   DD38 28 C4        jr z,WaK
0878   DD3A 05           dec b
0879   DD3B 2B           dec hl
0880   DD3C E5           push hl
0881   DD3D 36 20        ld (hl),32
0882   DD3F 21 10 C0     ld hl,$C010
0883   DD42 35           dec (hl)
0884   DD43 3E 20        ld a,32
0885   DD45 CD 2B 4A     call _putc
0886   DD48 35           dec (hl)
0887   DD49 E1           pop hl
0888   DD4A 18 B2        jr WaK
0889   DD4C             NameDone:
0890   DD4C E1           pop hl
0891   DD4D C3 15 D8     jp LevelChoose
0892   DD50             
0893   DD50             CheckBar:	       ; Find out how it goes for ya
0894   DD50 AF           xor a
0895   DD51 21 AF CF     ld hl,board+4
0896   DD54 06 10        ld b,16
0897   DD56             RepCheckBar:
0898   DD56 E5           push hl
0899   DD57 F5           push af
0900   DD58 CD 10 40     call LD_HL_MHL
0901   DD5B F1           pop af
0902   DD5C 11 07 E0     ld de,%1110000000000111   ; This would indicate an empty row
0903   DD5F CD 3C 40     call CP_HL_DE
0904   DD62 E1           pop hl
0905   DD63 28 05        jr z,EmptyRow
0906   DD65 3C           inc a
0907   DD66 23           inc hl
0908   DD67 23           inc hl
0909   DD68 10 EC        djnz RepCheckBar
0910   DD6A             EmptyRow:
0911   DD6A C6 D0        add a,$D0
0912   DD6C C3 91 E1     jp SendByte	       ; Send high information to opponent
0913   DD6F             
0914   DD6F             ShowCurB:	       ; This shows the current piece
0915   DD6F ED 5B FF C0  ld de,(cXY)
0916   DD73 21 01 C1     ld hl,cB
0917   DD76             ShowB:
0918   DD76 06 04        ld b,4
0919   DD78             SNext:
0920   DD78 E5           push hl
0921   DD79 CD 10 40     call LD_HL_MHL
0922   DD7C 19           add hl,de
0923   DD7D CD 7B DF     call PutBlock	       ; Put one block of the piece
0924   DD80 E1           pop hl
0925   DD81 23           inc hl
0926   DD82 23           inc hl
0927   DD83 10 F3        djnz SNext
0928   DD85 C9           ret
0929   DD86             
0930   DD86             EraseCurB:	       ; And this erase the current piece
0931   DD86 ED 5B FF C0  ld de,(cXY)
0932   DD8A 21 01 C1     ld hl,cB
0933   DD8D             EraseB:
0934   DD8D 06 04        ld b,4
0935   DD8F             ENext:
0936   DD8F E5           push hl
0937   DD90 CD 10 40     call LD_HL_MHL
0938   DD93 19           add hl,de
0939   DD94 CD 8C DF     call EraseBlock
0940   DD97 E1           pop hl
0941   DD98 23           inc hl
0942   DD99 23           inc hl
0943   DD9A 10 F3        djnz ENext
0944   DD9C C9           ret
0945   DD9D             
0946   DD9D             TestNewB:	       ; Check if the piece is at an allowed position
0947   DD9D 06 08        ld b,8
0948   DD9F 3A 1D C1     ld a,(newRot)
0949   DDA2 CD 2B DF     call Uncrunch
0950   DDA5 ED 5B 1B C1  ld de,(newXY)
0951   DDA9 21 09 C1     ld hl,cB+8
0952   DDAC 06 04        ld b,4
0953   DDAE             TNext:
0954   DDAE E5           push hl
0955   DDAF CD 10 40     call LD_HL_MHL
0956   DDB2 19           add hl,de
0957   DDB3 CD 5D DF     call GetCoord
0958   DDB6 20 07        jr nz,NotPoss
0959   DDB8 E1           pop hl
0960   DDB9 23           inc hl
0961   DDBA 23           inc hl
0962   DDBB 10 F1        djnz TNext
0963   DDBD AF           xor a
0964   DDBE C9           ret
0965   DDBF             NotPoss:
0966   DDBF E1           pop hl
0967   DDC0 C9           ret
0968   DDC1             
0969   DDC1             NewB:		       ; Creates a new piece and updates information
0970   DDC1 2A 23 C1     ld hl,(scoreU)
0971   DDC4 26 00        ld h,0
0972   DDC6 CD 44 40     call UNPACK_HL        ; L = (scoreU) DIV 10
0973   DDC9 32 23 C1     ld (scoreU),a	       ; (scoreU) = (scoreU) MOD 10
0974   DDCC 7D           ld a,l
0975   DDCD B7           or a
0976   DDCE 28 0B        jr z,CheckLines       ; If scoreU was <10, no 'real' score update
0977   DDD0 EB           ex de,hl
0978   DDD1 2A 21 C1     ld hl,(score)
0979   DDD4 19           add hl,de
0980   DDD5 22 21 C1     ld (score),hl	       ; Else update the score
0981   DDD8 CD AC DE     call ShowInfo	       ; And on the screen as well
0982   DDDB             CheckLines:
0983   DDDB AF           xor a
0984   DDDC 32 20 C1     ld (linesflag),a      ; This holds how many lines you eliminated
0985   DDDF 21 AF CF     ld hl,board+4
0986   DDE2 06 11        ld b,17
0987   DDE4             RepScan:
0988   DDE4 E5           push hl
0989   DDE5 CD 10 40     call LD_HL_MHL
0990   DDE8 11 FF FF     ld de,$FFFF	       ; This would indicate a full row
0991   DDEB CD 3C 40     call CP_HL_DE
0992   DDEE 20 1C        jr nz,NextRow	       ; If it wasn't check next row
0993   DDF0 E1           pop hl
0994   DDF1 C5           push bc
0995   DDF2 D5           push de
0996   DDF3 E5           push hl
0997   DDF4 54           ld d,h
0998   DDF5 5D           ld e,l
0999   DDF6 23           inc hl
1000   DDF7 23           inc hl
1001   DDF8 48           ld c,b
1002   DDF9 06 00        ld b,0
1003   DDFB CB 21        sla c
1004   DDFD ED B0        ldir		       ; Move everything down
1005   DDFF 21 20 C1     ld hl,linesflag
1006   DE02 34           inc (hl)	       ; Increase lines eliminated
1007   DE03 21 24 C1     ld hl,lines
1008   DE06 34           inc (hl)	       ; And also the total line counter
1009   DE07 E1           pop hl
1010   DE08 D1           pop de
1011   DE09 C1           pop bc
1012   DE0A 18 D8        jr RepScan
1013   DE0C             NextRow:
1014   DE0C E1           pop hl
1015   DE0D 23           inc hl
1016   DE0E 23           inc hl
1017   DE0F 10 D3        djnz RepScan
1018   DE11 3A 20 C1     ld a,(linesflag)
1019   DE14 B7           or a
1020   DE15 28 48        jr z,NoScoring        ; If no lines gotten, no score increase
1021   DE17 F5           push af
1022   DE18 47           ld b,a
1023   DE19 3A 2F C1     ld a,(players)
1024   DE1C 3D           dec a
1025   DE1D 28 1D        jr z,NoPenLines       ; If one player, no penalty lines sent
1026   DE1F C5           push bc
1027   DE20 CD 50 DD     call CheckBar
1028   DE23 C1           pop bc
1029   DE24 05           dec b
1030   DE25 28 15        jr z,NoPenLines       ; If only one line eliminated, no penatly lines
1031   DE27 3A 32 C1     ld a,(declines)       ; The flag, 1-3 or 2-4 lines to send
1032   DE2A 90           sub b
1033   DE2B ED 44        neg		       ; Now A = no of penalty lines
1034   DE2D F5           push af
1035   DE2E F6 F0        or $F0
1036   DE30 CD 91 E1     call SendByte	       ; Send it over to the opponent
1037   DE33 F1           pop af
1038   DE34 21 34 C1     ld hl,lastbar
1039   DE37 86           add a,(hl)	       ; Increase the opponents bar
1040   DE38 3C           inc a
1041   DE39 CD 0A DB     call ShowBar	       ; And show it
1042   DE3C             NoPenLines:
1043   DE3C F1           pop af
1044   DE3D 21 D8 E2     ld hl,Scoring
1045   DE40 16 00        ld d,0
1046   DE42 5F           ld e,a
1047   DE43 1D           dec e
1048   DE44 19           add hl,de
1049   DE45 66           ld h,(hl)	       ; H = score for level 0
1050   DE46 3A 25 C1     ld a,(level)
1051   DE49 3C           inc a
1052   DE4A 6F           ld l,a
1053   DE4B CD 47 45     call MUL_HL	       ; Multiply with (level+1)
1054   DE4E EB           ex de,hl
1055   DE4F 21 21 C1     ld hl,Score
1056   DE52 E5           push hl
1057   DE53 CD 10 40     call LD_HL_MHL
1058   DE56 19           add hl,de	       ; Add with total score so far
1059   DE57 EB           ex de,hl
1060   DE58 E1           pop hl
1061   DE59 73           ld (hl),e	       ; Store the new score
1062   DE5A 23           inc hl
1063   DE5B 72           ld (hl),d
1064   DE5C CD 57 E0     call ShowWell	       ; Update the well
1065   DE5F             NoScoring:
1066   DE5F 26 00        ld h,0
1067   DE61 3A 24 C1     ld a,(lines)
1068   DE64 6F           ld l,a
1069   DE65 CD 44 40     call UNPACK_HL        ; HL = lines DIV 10
1070   DE68 3A 25 C1     ld a,(level)
1071   DE6B BD           cp l		       ; Check if the level should increase
1072   DE6C 30 16        jr nc,NoNewLevel
1073   DE6E 7D           ld a,l
1074   DE6F 32 25 C1     ld (level),a	       ; Update the levle
1075   DE72 CD 47 E0     call PastePattern     ; Remove the last pattern
1076   DE75 CD DE DF     call ShowPattern      ; And update it with the new pattern
1077   DE78 3A 2F C1     ld a,(players)
1078   DE7B 3D           dec a
1079   DE7C 28 06        jr z,NoNewLevel
1080   DE7E 3A 34 C1     ld a,(lastbar)
1081   DE81 CD 0A DB     call ShowBar
1082   DE84             NoNewLevel:
1083   DE84 CD AC DE     call ShowInfo	       ; Update score, level and lines on screen
1084   DE87             CreateNew:
1085   DE87 CD DF DE     call CreateNewPiece   ; Randomize new piece
1086   DE8A AF           xor a
1087   DE8B 32 19 C1     ld (cRot),a
1088   DE8E 32 1D C1     ld (newRot),a
1089   DE91 06 00        ld b,0
1090   DE93 CD 2B DF     call Uncrunch	       ; Uncrunch the piece
1091   DE96 21 10 06     ld hl,$0610
1092   DE99 22 FF C0     ld (cXY),hl
1093   DE9C 22 1B C1     ld (newXY),hl
1094   DE9F CD 9D DD     call TestNewB	       ; Check if it's possible to put out the piece
1095   DEA2 28 05        jr z,NotDead
1096   DEA4 21 1A C1     ld hl,flags
1097   DEA7 CB C6        set 0,(hl)	       ; If not, set dead flag
1098   DEA9             NotDead:
1099   DEA9 C3 6F DD     jp ShowCurB	       ; Show the current piece
1100   DEAC             
1101   DEAC             ShowInfo:	       ; Updates score, level and lives
1102   DEAC 21 61 0E     ld hl,$0E61
1103   DEAF 22 7C C3     ld ($C37C),hl
1104   DEB2 21 21 C1     ld hl,Score
1105   DEB5 CD 10 40     call LD_HL_MHL
1106   DEB8 06 05        ld b,5
1107   DEBA CD 19 DF     call DM_HL_Deci
1108   DEBD 21 6D 22     ld hl,$226D
1109   DEC0 22 7C C3     ld ($C37C),hl
1110   DEC3 21 25 C1     ld hl,Level
1111   DEC6 6E           ld l,(hl)
1112   DEC7 26 00        ld h,0
1113   DEC9 06 02        ld b,2
1114   DECB CD 19 DF     call DM_HL_Deci
1115   DECE 21 69 34     ld hl,$3469
1116   DED1 22 7C C3     ld ($C37C),hl
1117   DED4 21 24 C1     ld hl,Lines
1118   DED7 6E           ld l,(hl)
1119   DED8 26 00        ld h,0
1120   DEDA 06 03        ld b,3
1121   DEDC C3 19 DF     jp DM_HL_Deci
1122   DEDF             
1123   DEDF             CreateNewPiece:
1124   DEDF 11 05 FC     ld de,$FC05
1125   DEE2 21 11 C1     ld hl,cB+16	       ; Remove the next piece
1126   DEE5 CD 8D DD     call EraseB
1127   DEE8             RandP:
1128   DEE8 3A 1F C1     ld a,(next)
1129   DEEB 32 FB C0     ld (cBit),a
1130   DEEE 2A 2D C1     ld hl,(cNBitOfs)      ; Make it the current piece instead
1131   DEF1 22 F9 C0     ld (cBitOfs),hl
1132   DEF4 3E 07        ld a,7
1133   DEF6 CD C9 DF     call Random	       ; Get a random number between 0-6
1134   DEF9 3C           inc a		       ; Increase with 1 to get between 1-7
1135   DEFA 32 1F C1     ld (next),a
1136   DEFD 87           add a,a
1137   DEFE 87           add a,a
1138   DEFF 87           add a,a
1139   DF00 21 F9 E1     ld hl,BitData-8
1140   DF03 16 00        ld d,0
1141   DF05 5F           ld e,a
1142   DF06 19           add hl,de	       ; Find out where the bit structure is
1143   DF07 22 2D C1     ld (cNBitOfs),hl
1144   DF0A 06 10        ld b,16
1145   DF0C AF           xor a
1146   DF0D CD 2E DF     call Uncrunch2
1147   DF10 11 05 FC     ld de,$FC05
1148   DF13 21 11 C1     ld hl,cB+16
1149   DF16 C3 76 DD     jp ShowB	       ; Show the next piece
1150   DF19             
1151   DF19             DM_HL_Deci:	       ; Display HL in menu style with leading zeros
1152   DF19 11 2B C1     ld de,String+5
1153   DF1C AF           xor a
1154   DF1D 12           ld (de),a
1155   DF1E             RepUnp:
1156   DF1E 1B           dec de
1157   DF1F CD 44 40     call UNPACK_HL
1158   DF22 C6 30        add a,48
1159   DF24 12           ld (de),a
1160   DF25 10 F7        djnz RepUnp
1161   DF27 EB           ex de,hl
1162   DF28 C3 A5 4A     jp _vputs
1163   DF2B             
1164   DF2B             Uncrunch:	       ; Extracts the piece from compressed data
1165   DF2B 2A F9 C0     ld hl,(cBitOfs)
1166   DF2E             Uncrunch2:
1167   DF2E E6 03        and %00000011
1168   DF30 16 00        ld d,0
1169   DF32 5F           ld e,a
1170   DF33 CB 23        sla e
1171   DF35 19           add hl,de
1172   DF36 E5           push hl
1173   DF37 21 01 C1     ld hl,cB
1174   DF3A 16 00        ld d,0
1175   DF3C 58           ld e,b
1176   DF3D 19           add hl,de
1177   DF3E EB           ex de,hl
1178   DF3F E1           pop hl
1179   DF40 CD 10 40     call LD_HL_MHL
1180   DF43 06 08        ld b,8
1181   DF45             URep:
1182   DF45 7D           ld a,l
1183   DF46 E6 03        and %00000011
1184   DF48 12           ld (de),a
1185   DF49 13           inc de
1186   DF4A CB 1C        rr h
1187   DF4C CB 1D        rr l
1188   DF4E CB 1C        rr h
1189   DF50 CB 1D        rr l
1190   DF52 10 F1        djnz URep
1191   DF54 C9           ret
1192   DF55             
1193   DF55             PutCoord:	       ; Stores a block in the wello
1194   DF55 E5           push hl
1195   DF56 CD 64 DF     call GetBoardOfs
1196   DF59 B6           or (hl)
1197   DF5A 77           ld (hl),a
1198   DF5B E1           pop hl
1199   DF5C C9           ret
1200   DF5D             
1201   DF5D             GetCoord:	       ; Finds out if there is a block in the well at H,L
1202   DF5D E5           push hl
1203   DF5E CD 64 DF     call GetBoardOfs
1204   DF61 A6           and (hl)
1205   DF62 E1           pop hl
1206   DF63 C9           ret
1207   DF64             
1208   DF64             GetBoardOfs:	       ; Convert location H,L to an address, HL
1209   DF64 C5           push bc
1210   DF65 4D           ld c,l
1211   DF66 CB 21        sla c
1212   DF68 CB 5C        bit 3,h
1213   DF6A 28 01        jr z,LeftPart
1214   DF6C 0C           inc c
1215   DF6D             LeftPart:
1216   DF6D 44           ld b,h
1217   DF6E 3E 01        ld a,1
1218   DF70             RotateAgain:
1219   DF70 07           rlca
1220   DF71 10 FD        djnz RotateAgain
1221   DF73 21 AB CF     ld hl,board
1222   DF76 06 00        ld b,0
1223   DF78 09           add hl,bc
1224   DF79 C1           pop bc
1225   DF7A C9           ret
1226   DF7B             
1227   DF7B             PutBlock:	       ; Put block at H,L
1228   DF7B C5           push bc
1229   DF7C D5           push de
1230   DF7D E5           push hl
1231   DF7E CD 9F DF     call GetBlockOfs
1232   DF81             PutRow:
1233   DF81 F5           push af
1234   DF82 B6           or (hl)
1235   DF83 77           ld (hl),a
1236   DF84 F1           pop af
1237   DF85 19           add hl,de
1238   DF86 10 F9        djnz PutRow
1239   DF88 E1           pop hl
1240   DF89 D1           pop de
1241   DF8A C1           pop bc
1242   DF8B C9           ret
1243   DF8C             
1244   DF8C             EraseBlock:	       ; Erase a block at H,L
1245   DF8C C5           push bc
1246   DF8D D5           push de
1247   DF8E E5           push hl
1248   DF8F CD 9F DF     call GetBlockOfs
1249   DF92 EE FF        xor $FF
1250   DF94             EraseRow:
1251   DF94 F5           push af
1252   DF95 A6           and (hl)
1253   DF96 77           ld (hl),a
1254   DF97 F1           pop af
1255   DF98 19           add hl,de
1256   DF99 10 F9        djnz EraseRow
1257   DF9B E1           pop hl
1258   DF9C D1           pop de
1259   DF9D C1           pop bc
1260   DF9E C9           ret
1261   DF9F             
1262   DF9F             GetBlockOfs:	       ; Finds out where on the screen H,L is
1263   DF9F 4C           ld c,h
1264   DFA0 26 00        ld h,0
1265   DFA2 3E 11        ld a,17
1266   DFA4 95           sub l
1267   DFA5 6F           ld l,a
1268   DFA6 CB 25        sla l
1269   DFA8 CB 25        sla l
1270   DFAA CB 25        sla l
1271   DFAC 29           add hl,hl
1272   DFAD 29           add hl,hl
1273   DFAE 29           add hl,hl
1274   DFAF 79           ld a,c
1275   DFB0 CB 3F        srl a
1276   DFB2 C6 04        add a,4
1277   DFB4 16 00        ld d,0
1278   DFB6 5F           ld e,a
1279   DFB7 19           add hl,de
1280   DFB8 11 00 FC     ld de,$FC00
1281   DFBB 19           add hl,de
1282   DFBC 06 04        ld b,4
1283   DFBE 11 10 00     ld de,16
1284   DFC1 3E F0        ld a,$F0
1285   DFC3 CB 41        bit 0,c
1286   DFC5 C8           ret z
1287   DFC6 3E 0F        ld a,$0F
1288   DFC8 C9           ret
1289   DFC9             
1290   DFC9             Random: 	       ; Creates a random number 0 <= x < A
1291   DFC9 C5           push bc
1292   DFCA D5           push de
1293   DFCB E5           push hl
1294   DFCC 47           ld b,a
1295   DFCD ED 5F        ld a,r
1296   DFCF 87           add a,a
1297   DFD0 21 00 00     ld hl,0
1298   DFD3 16 00        ld d,0
1299   DFD5 5F           ld e,a
1300   DFD6             RMul:
1301   DFD6 19           add hl,de
1302   DFD7 10 FD        djnz RMul
1303   DFD9 7C           ld a,h
1304   DFDA E1           pop hl
1305   DFDB D1           pop de
1306   DFDC C1           pop bc
1307   DFDD C9           ret
1308   DFDE             
1309   DFDE             ShowPattern:	       ; Show pattern for the current level
1310   DFDE 21 39 E2     ld hl,Pattern
1311   DFE1 3A 25 C1     ld a,(level)
1312   DFE4 FE 10        cp 16
1313   DFE6 38 02        jr c,Below16
1314   DFE8 3E 0F        ld a,15	       ; If level>15, show pattern for level 15
1315   DFEA             Below16:
1316   DFEA 87           add a,a
1317   DFEB 87           add a,a
1318   DFEC 87           add a,a
1319   DFED 16 00        ld d,0
1320   DFEF 5F           ld e,a
1321   DFF0 19           add hl,de
1322   DFF1 E5           push hl
1323   DFF2 DD E1        pop ix
1324   DFF4 11 FA C9     ld de,$C9FA
1325   DFF7 06 08        ld b,8
1326   DFF9             SP_Row:
1327   DFF9 C5           push bc
1328   DFFA DD E5        push ix
1329   DFFC E1           pop hl
1330   DFFD 06 08        ld b,8
1331   DFFF             SP_Line:
1332   DFFF 7E           ld a,(hl)
1333   E000 23           inc hl
1334   E001 C5           push bc
1335   E002 06 10        ld b,16
1336   E004             SP_Byte:
1337   E004 12           ld (de),a
1338   E005 13           inc de
1339   E006 10 FC        djnz SP_Byte
1340   E008 C1           pop bc
1341   E009 10 F4        djnz SP_Line
1342   E00B C1           pop bc
1343   E00C 10 EB        djnz SP_Row
1344   E00E DD 21 BA E2  ld ix,Gaps
1345   E012 DD 46 FF     ld b,(ix-1)
1346   E015             MakeGap:
1347   E015 C5           push bc
1348   E016 DD 66 01     ld h,(ix+1)
1349   E019 DD 6E 00     ld l,(ix)
1350   E01C 11 FA C9     ld de,$C9FA
1351   E01F 19           add hl,de
1352   E020 DD 7E 02     ld a,(ix+2)
1353   E023 DD 46 03     ld b,(ix+3)
1354   E026             MK_Row:
1355   E026 C5           push bc
1356   E027 E5           push hl
1357   E028 57           ld d,a
1358   E029 DD 46 04     ld b,(ix+4)
1359   E02C             MK_Col:
1360   E02C 4F           ld c,a
1361   E02D A6           and (hl)
1362   E02E 77           ld (hl),a
1363   E02F 79           ld a,c
1364   E030 0F           rrca
1365   E031 38 01        jr c,MK_SameByte
1366   E033 23           inc hl
1367   E034             MK_SameByte:
1368   E034 10 F6        djnz MK_Col
1369   E036 7A           ld a,d
1370   E037 E1           pop hl
1371   E038 C1           pop bc
1372   E039 11 10 00     ld de,16
1373   E03C 19           add hl,de
1374   E03D 10 E7        djnz MK_Row
1375   E03F 11 05 00     ld de,5
1376   E042 DD 19        add ix,de
1377   E044 C1           pop bc
1378   E045 10 CE        djnz MakeGap
1379   E047             PastePattern:	       ; XOR the pattern on the screen
1380   E047 21 00 FC     ld hl,$FC00
1381   E04A 11 FA C9     ld de,$C9FA
1382   E04D             PasteIt:
1383   E04D 1A           ld a,(de)
1384   E04E AE           xor (hl)
1385   E04F 77           ld (hl),a
1386   E050 13           inc de
1387   E051 23           inc hl
1388   E052 7C           ld a,h
1389   E053 B5           or l
1390   E054 20 F7        jr nz,PasteIt
1391   E056 C9           ret
1392   E057             
1393   E057             ShowWell:	       ; Show the whole well
1394   E057 21 02 03     ld hl,$0302
1395   E05A             SWNewRow:
1396   E05A 06 0A        ld b,10
1397   E05C             RepPut:
1398   E05C CD 5D DF     call GetCoord
1399   E05F F5           push af
1400   E060 CC 8C DF     call z,EraseBlock
1401   E063 F1           pop af
1402   E064 C4 7B DF     call nz,PutBlock
1403   E067 24           inc h
1404   E068 10 F2        djnz RepPut
1405   E06A 26 03        ld h,$03
1406   E06C 2C           inc l
1407   E06D 7D           ld a,l
1408   E06E FE 12        cp $12
1409   E070 20 E8        jr nz,SWNewRow
1410   E072 C9           ret
1411   E073             
1412   E073             ShowFrame:	       ; Clears the screen and shows some info
1413   E073 CD 7E 4A     call _clrLCD
1414   E076 21 00 00     ld hl,0
1415   E079 22 0F C0     ld ($C00F),hl
1416   E07C FD CB 05 DE  set 3,(iy+5)
1417   E080 21 A8 E3     ld hl,Title
1418   E083 CD 37 4A     call _puts
1419   E086 FD CB 05 9E  res 3,(iy+5)
1420   E08A 21 02 3A     ld hl,$3A02
1421   E08D 22 7C C3     ld ($C37C),hl
1422   E090 21 BE E3     ld hl,Coder
1423   E093 C3 A5 4A     jp _vputs
1424   E096             
1425   E096             ShowLayout:	       ; Shows the game layout
1426   E096 CD 73 E0     call ShowFrame
1427   E099 CD 7E 4A     call _clrLCD
1428   E09C 01 61 07     ld bc,$0761
1429   E09F ED 43 7C C3  ld ($C37C),bc
1430   E0A3 21 DC E2     ld hl,InfoText
1431   E0A6 CD A5 4A     call _vputs
1432   E0A9 01 61 1B     ld bc,$1B61
1433   E0AC ED 43 7C C3  ld ($C37C),bc
1434   E0B0 CD A5 4A     call _vputs
1435   E0B3 01 63 2D     ld bc,$2D63
1436   E0B6 ED 43 7C C3  ld ($C37C),bc
1437   E0BA CD A5 4A     call _vputs
1438   E0BD 21 B1 E4     ld hl,ZTet
1439   E0C0 11 60 FC     ld de,$FC60
1440   E0C3 06 09        ld b,9
1441   E0C5             GFXNewRow:
1442   E0C5 C5           push bc
1443   E0C6 01 05 00     ld bc,5
1444   E0C9 ED B0        ldir
1445   E0CB 01 0B 00     ld bc,11
1446   E0CE EB           ex de,hl
1447   E0CF 09           add hl,bc
1448   E0D0 EB           ex de,hl
1449   E0D1 C1           pop bc
1450   E0D2 10 F1        djnz GFXNewRow
1451   E0D4 11 10 00     ld de,16
1452   E0D7 06 40        ld b,64
1453   E0D9 DD 21 00 FC  ld ix,$FC00
1454   E0DD             DWNextRow:
1455   E0DD DD 36 05 10  ld (ix+5),$10
1456   E0E1 DD 36 0A 08  ld (ix+10),$08
1457   E0E5 DD 19        add ix,de
1458   E0E7 10 F4        djnz DWNextRow
1459   E0E9 21 06 14     ld hl,$1406
1460   E0EC 22 7C C3     ld ($C37C),hl
1461   E0EF 21 BE E3     ld hl,Coder
1462   E0F2 06 08        ld b,8
1463   E0F4 CD A9 4A     call _vputsn
1464   E0F7 E5           push hl
1465   E0F8 21 07 1A     ld hl,$1A07
1466   E0FB 22 7C C3     ld ($C37C),hl
1467   E0FE E1           pop hl
1468   E0FF 06 08        ld b,8
1469   E101 CD A9 4A     call _vputsn
1470   E104 C3 DE DF     jp ShowPattern
1471   E107             
1472   E107             D_ZT_STR:
../ztetris/ZTETRIS.ASM line 1472: label value misalligned.           (D_ZT_STR)
1473   E107 7E           ld a,(hl)
1474   E108 23           inc hl
1475   E109 B7           or a
1476   E10A C8           ret z
1477   E10B CD 2B 4A     call _putc
../ztetris/ZTETRIS.ASM line 1478: Range of relative branch exceeded. 
1478   E10E 18 00        jr D_ZT_STR
1479   E110             
1480   E110             Quit:		       ; Quits the program
1481   E110 21 EE E2     ld hl,ProgName        ; All this stuff is to make sure the hiscore table
1482   E113 E7           rst 20h	       ; and resume stuff are stored in the variable
1483   E114 D7           rst 10h
1484   E115 EB           ex de,hl	       ; HL -> start of variable
1485   E116 78           ld a,b
1486   E117 11 C8 0B     ld de,Resume-$D748+4  ; DE = relative offset to stuff to store (-4)
1487   E11A 19           add hl,de
1488   E11B CE 00        adc a,0	       ; Next block if necessary
1489   E11D 11 0C E3     ld de,Resume	       ; DE = start of bytes to copy
1490   E120 06 9C        ld b,156	       ; 156 bytes to copy
1491   E122             RepCopy:
1492   E122 F5           push af
1493   E123 E5           push hl
1494   E124 CD C3 46     call $46C3
1495   E127 1A           ld a,(de)	       ; Read
1496   E128 77           ld (hl),a	       ; And save it in the real variable
1497   E129 E1           pop hl
1498   E12A F1           pop af
1499   E12B CD 37 46     call $4637
1500   E12E 13           inc de
1501   E12F 10 F1        djnz RepCopy
1502   E131             
1503   E131 21 FA C9     ld hl,$C9FA
1504   E134 36 00        ld (hl),0
1505   E136 54           ld d,h
1506   E137 5D           ld e,l
1507   E138 13           inc de
1508   E139 01 FF 03     ld bc,1023
1509   E13C ED B0        ldir		       ; Clear graph memory
1510   E13E             
1511   E13E FD CB 0D CE  set 1,(iy+$0D)        ; Restoring the 'update textshadow' flag
1512   E142 FD CB 03 86  res 0,(iy+$03)        ; Clear the ON-pressed flag
1513   E146 CD 82 4A     call _clrScrn	       ; Clear screen and the textshadow
1514   E149 21 00 00     ld hl,0
1515   E14C 22 0F C0     ld ($C00F),hl	       ; Moving the cursor to top left corner
1516   E14F C9           ret		       ; Return to TI-OS! (or a shell)
1517   E150             
1518   E150             #include linkrout.h    ; Some very nice linkroutines
0001+  E150             ;
0002+  E150             ; SOME VERY NICE LINK ROUTINES MADE BY PASCAL BOURON
0003+  E150             ;
0004+  E150             ; I've made some modifications so it fits ZTetris
0005+  E150             ;
0006+  E150             
0007+  E150             ReceiveByte:
0008+  E150 21 00 00     ld hl,0
0009+  E153 22 30 C1     ld (lcounter),hl
0010+  E156             
0011+  E156 1E 01        ld 	 e,1			 ; for the OR
0012+  E158 0E 00        ld 	 c,0			 ; byte receive
0013+  E15A 06 08        ld 	 b,8			 ; counter
0014+  E15C 3E C0        ld 	 a,$C0
0015+  E15E D3 07        out	 (7),a
0016+  E160             rb_w_Start:
0017+  E160 DB 07        in 	 a,(7)
0018+  E162 E6 03        and 3
0019+  E164 FE 03        cp  3
0020+  E166 20 05        jr 	 nz,rb_get_bit
0021+  E168 CD D3 E1     call Test_ON
0022+  E16B 18 F3        jr 	 rb_w_Start
0023+  E16D             rb_get_bit:
0024+  E16D FE 02        cp 	 2
0025+  E16F 28 09        jr 	 z,rb_receive_zero
0026+  E171 79           ld 	 a,c
0027+  E172 B3           or 	 e
0028+  E173 4F           ld 	 c,a
0029+  E174 3E D4        ld 	 a,$D4
0030+  E176 D3 07        out	 (7),a
0031+  E178 18 04        jr 	 rb_waitStop
0032+  E17A             rb_receive_zero:
0033+  E17A 3E E8        ld 	 a,$E8
0034+  E17C D3 07        out	 (7),a
0035+  E17E             rb_waitStop:
0036+  E17E CD D3 E1     call Test_ON
0037+  E181 DB 07        in 	 a,(7)
0038+  E183 E6 03        and	 3
0039+  E185 28 F7        jr 	 z,rb_waitStop
0040+  E187 3E C0        ld 	 a,$c0
0041+  E189 D3 07        out	 (7),a
0042+  E18B CB 13        rl 	 e
0043+  E18D 10 D1        djnz 	 rb_w_Start
0044+  E18F 79           ld 	 a,c
0045+  E190 C9           ret
0046+  E191             
0047+  E191             SendByte:
0048+  E191 21 00 00     ld hl,0
0049+  E194 22 30 C1     ld (lcounter),hl
0050+  E197 06 08        ld 	 b,8
0051+  E199 32 38 C1     ld (sbyte),a
0052+  E19C 4F           ld 	 c,a			 ;byte to send
0053+  E19D 3E C0        ld 	 a,$C0
0054+  E19F D3 07        out	 (7),a
0055+  E1A1             w_setport3:
0056+  E1A1 DB 07        in 	 a,(7)
0057+  E1A3 E6 03        and 3
0058+  E1A5 FE 03        cp  3
0059+  E1A7 28 05        jr 	 z,calc_bit
0060+  E1A9 CD E0 E1     call SendTest_ON
0061+  E1AC 18 F3        jr 	 w_setport3
0062+  E1AE             calc_bit:
0063+  E1AE 79           ld 	 a,c
0064+  E1AF E6 01        and	 1
0065+  E1B1 28 06        jr 	 z,send_one
0066+  E1B3             send_zero:
0067+  E1B3 3E E8        ld 	 a,$E8
0068+  E1B5 D3 07        out	 (7),A
0069+  E1B7 18 04        jr 	 wait_setport
0070+  E1B9             send_one:
0071+  E1B9 3E D4        ld 	 a,$D4
0072+  E1BB D3 07        out	 (7),A
0073+  E1BD             wait_setport:
0074+  E1BD CD E0 E1     call SendTest_ON
0075+  E1C0 DB 07        in 	 a,(7)
0076+  E1C2 E6 03        and	 3
0077+  E1C4 20 F7        jr 	 nz,wait_setport
0078+  E1C6 3E C0        ld 	 a,$C0
0079+  E1C8 D3 07        out	 (7),A
0080+  E1CA CB 39        srl c
0081+  E1CC 10 D3        djnz w_setport3
0082+  E1CE AF           xor a
0083+  E1CF 32 38 C1     ld (sbyte),a
0084+  E1D2 C9           ret
0085+  E1D3             
0086+  E1D3             Test_ON:
0087+  E1D3 3A 30 C1     ld a,(lcounter)
0088+  E1D6 3C           inc a
0089+  E1D7 32 30 C1     ld (lcounter),a
0090+  E1DA FE FF        cp 255
0091+  E1DC C0           ret nz
0092+  E1DD E1           pop hl  ;Back to the place you were before.	Gotta love it!
0093+  E1DE AF           xor a
0094+  E1DF C9           ret
0095+  E1E0             
0096+  E1E0             SendTest_ON:
0097+  E1E0 3A 35 C1     ld a,(hsflag)
0098+  E1E3 B7           or a
0099+  E1E4 28 0B        jr z,LongWait
0100+  E1E6 CD 71 53     call GET_KEY
0101+  E1E9 FE 37        cp $37
0102+  E1EB C0           ret nz
0103+  E1EC E1           pop hl
0104+  E1ED E1           pop hl
0105+  E1EE C3 10 E1     jp Quit
0106+  E1F1             LongWait:
0107+  E1F1 2A 30 C1     ld hl,(lcounter)
0108+  E1F4 23           inc hl
0109+  E1F5 22 30 C1     ld (lcounter),hl
0110+  E1F8 11 FF 3F     ld de,$3FFF
0111+  E1FB CD 3C 40     call CP_HL_DE
0112+  E1FE C0           ret nz
0113+  E1FF E1           pop hl
0114+  E200 C9           ret
1519   E201             
1520   E201             ;
1521   E201             ;	  ÛÛ	 ÛÛ   ÛÛ    ÛÛÛ   ÛÛÛ	ÛÛÛ
1522   E201             ;  ÛÛÛÛ   ÛÛ	ÛÛ     ÛÛ    Û	  Û	  Û
1523   E201             ;
1524   E201             
1525   E201             BitData:	       ; Compressed data of the pieces (28 pieces)
1526   E201 98 15 04 65  .dw %0001010110011000,%0110010100000100
1527   E205 59 21 54 6A  .dw %0010000101011001,%0110101001010100
1528   E209 90 15 54 26  .dw %0001010110010000,%0010011001010100
1529   E20D 9A 15 48 65  .dw %0001010110011010,%0110010101001000
1530   E211 48 59 48 59  .dw %0101100101001000,%0101100101001000
1531   E215 48 59 48 59  .dw %0101100101001000,%0101100101001000
1532   E219 94 15 54 16  .dw %0001010110010100,%0001011001010100
1533   E21D 59 16 49 65  .dw %0001011001011001,%0110010101001001
1534   E221 49 05 54 21  .dw %0000010101001001,%0010000101010100
1535   E225 49 05 54 21  .dw %0000010101001001,%0010000101010100
1536   E229 48 15 65 10  .dw %0001010101001000,%0001000001100101
1537   E22D 48 15 65 10  .dw %0001010101001000,%0001000001100101
1538   E231 9D 15 54 76  .dw %0001010110011101,%0111011001010100
1539   E235 9D 15 54 76  .dw %0001010110011101,%0111011001010100
1540   E239             
1541   E239             Pattern:	       ; Pattern for each level
1542   E239 AA 55 AA 55  .db $AA,$55,$AA,$55,$AA,$55,$AA,$55
1542   E23D AA 55 AA 55 
1543   E241 88 FF 22 FF  .db $88,$FF,$22,$FF,$88,$FF,$22,$FF
1543   E245 88 FF 22 FF 
1544   E249 FF 99 99 FF  .db $FF,$99,$99,$FF,$FF,$99,$99,$FF
1544   E24D FF 99 99 FF 
1545   E251 50 D7 14 F7  .db $50,$D7,$14,$F7,$00,$F7,$14,$D7
1545   E255 00 F7 14 D7 
1546   E259 EA AA AE 00  .db $EA,$AA,$AE,$00,$57,$55,$75,$00
1546   E25D 57 55 75 00 
1547   E261 FE AA AA AA  .db $FE,$AA,$AA,$AA,$28,$AA,$FE,$00
1547   E265 28 AA FE 00 
1548   E269 55 55 AA AA  .db $55,$55,$AA,$AA,$55,$55,$AA,$AA
1548   E26D 55 55 AA AA 
1549   E271 80 FE 02 FB  .db $80,$FE,$02,$FB,$08,$EF,$20,$BF
1549   E275 08 EF 20 BF 
1550   E279 EE EE EE 00  .db $EE,$EE,$EE,$00,$77,$77,$77,$00
1550   E27D 77 77 77 00 
1551   E281 66 CC 99 33  .db $66,$CC,$99,$33,$66,$CC,$99,$33
1551   E285 66 CC 99 33 
1552   E289 CC 33 CC 33  .db $CC,$33,$CC,$33,$CC,$33,$CC,$33
1552   E28D CC 33 CC 33 
1553   E291 FE 82 BA AA  .db $FE,$82,$BA,$AA,$BA,$82,$FE,$00
1553   E295 BA 82 FE 00 
1554   E299 CC CC 33 33  .db $CC,$CC,$33,$33,$CC,$CC,$33,$33
1554   E29D CC CC 33 33 
1555   E2A1 FF AA FF AA  .db $FF,$AA,$FF,$AA,$FF,$AA,$FF,$AA
1555   E2A5 FF AA FF AA 
1556   E2A9 7C FE 7C 00  .db $7C,$FE,$7C,$00,$7C,$FE,$7C,$00
1556   E2AD 7C FE 7C 00 
1557   E2B1 FF EF 47 12  .db $FF,$EF,$47,$12,$B8,$FD,$FF,$FF
1557   E2B5 B8 FD FF FF 
1558   E2B9             
1559   E2B9 06           .db 6
1560   E2BA             Gaps:		       ; Gaps where the pattern shouldn't be shown
1561   E2BA 05 00        .dw $005 \ .db $EF,64,42
1561   E2BC EF 40 2A    
1562   E2BF 7B 00        .dw $07B \ .db $FE,14,23
1562   E2C1 FE 0E 17    
1563   E2C4 BB 01        .dw $1BB \ .db $FE,14,23
1563   E2C6 FE 0E 17    
1564   E2C9 DB 02        .dw $2DB \ .db $FE,14,23
1564   E2CB FE 0E 17    
1565   E2CE 21 03        .dw $321 \ .db $FD,12,20
1565   E2D0 FD 0C 14    
1566   E2D3 40 00        .dw $040 \ .db $7F,30,43
1566   E2D5 7F 1E 2B    
1567   E2D8             
1568   E2D8             Scoring:	       ; Score for each level
1569   E2D8 04 0A 1E 78  .db 4,10,30,120
1570   E2DC             
1571   E2DC             InfoText:
1572   E2DC 53 63 6F 72  .db "Score",0
1572   E2E0 65 00 
1573   E2E2 4C 65 76 65  .db "Level",0
1573   E2E6 6C 00 
1574   E2E8 4C 69 6E 65  .db "Lines",0
1574   E2EC 73 00 
1575   E2EE             
1576   E2EE             ProgName:
1577   E2EE 12 07 7A 74  .db $12,7,"ztetris"
1577   E2F2 65 74 72 69 
1577   E2F6 73 
1578   E2F7             
1579   E2F7             LevelCnts:
1580   E2F7 28 24 20 1C  .db 40,36,32,28,25,22,19,17,15,13,11,10,9,8,7,6,5,4,3,2,1
1580   E2FB 19 16 13 11 
1580   E2FF 0F 0D 0B 0A 
1580   E303 09 08 07 06 
1580   E307 05 04 03 02 
1580   E30B 01 
1581   E30C             
1582   E30C             Resume:
1583   E30C 00           .db 0
1584   E30D 00 00 00 00  .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1584   E311 00 00 00 00 
1584   E315 00 00 00 00 
1584   E319 00 00 00 00 
1585   E31D 00 00 00 00  .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1585   E321 00 00 00 00 
1585   E325 00 00 00 00 
1585   E329 00 00 00 00 
1586   E32D 00 00 00 00  .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1586   E331 00 00 00 00 
1586   E335 00 00 00 00 
1586   E339 00 00 00 00 
1587   E33D 00 00 00 00  .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1587   E341 00 00 00 00 
1587   E345 00 00 00 00 
1587   E349 00 00 00 00 
1587   E34D 00 00 00 
1588   E350 00 00 00 00  .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1588   E354 00 00 00 00 
1588   E358 00 00 00 00 
1588   E35C 00 00 00 00 
1588   E360 00 00 00 00 
1589   E364 00 00 00 00  .db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
1589   E368 00 00 00 00 
1589   E36C 00 00 00 00 
1589   E370 00 00 00 00 
1589   E374 00 00 00 00 
1590   E378             
1591   E378             Hiscore:
1592   E378 31 2E 20 2D  .db "1. ----------",0,0,0
1592   E37C 2D 2D 2D 2D 
1592   E380 2D 2D 2D 2D 
1592   E384 2D 00 00 00 
1593   E388 32 2E 20 2D  .db "2. ----------",0,0,0
1593   E38C 2D 2D 2D 2D 
1593   E390 2D 2D 2D 2D 
1593   E394 2D 00 00 00 
1594   E398 33 2E 20 2D  .db "3. ----------",0,0,0
1594   E39C 2D 2D 2D 2D 
1594   E3A0 2D 2D 2D 2D 
1594   E3A4 2D 00 00 00 
1595   E3A8             
1596   E3A8             Title:
1597   E3A8 5A 54 65 74  .db "ZTetris 86       v1.1",0
1597   E3AC 72 69 73 20 
1597   E3B0 38 36 20 20 
1597   E3B4 20 20 20 20 
1597   E3B8 20 76 31 2E 
1597   E3BC 31 00 
1598   E3BE             
1599   E3BE             Coder:
1600   E3BE 62 79 20 4A  .db "by Jimmy Mardell  "
1600   E3C2 69 6D 6D 79 
1600   E3C6 20 4D 61 72 
1600   E3CA 64 65 6C 6C 
1600   E3CE 20 20 
1601   E3D0 3C 6D 6A 61  .db "<mja@algonet.se>",0
1601   E3D4 40 61 6C 67 
1601   E3D8 6F 6E 65 74 
1601   E3DC 2E 73 65 3E 
1601   E3E0 00 
1602   E3E1             
1603   E3E1             PlChoose:
1604   E3E1 43 68 6F 6F  .db "Choose player mode",0
1604   E3E5 73 65 20 70 
1604   E3E9 6C 61 79 65 
1604   E3ED 72 20 6D 6F 
1604   E3F1 64 65 00 
1605   E3F4 31 20 70 6C  .db "1 player",0
1605   E3F8 61 79 65 72 
1605   E3FC 00 
1606   E3FD 32 20 70 6C  .db "2 players",0
1606   E401 61 79 65 72 
1606   E405 73 00 
1607   E407             
1608   E407             GameOverText:
1609   E407 20 47 61 6D  .db " Game Over ",0
1609   E40B 65 20 4F 76 
1609   E40F 65 72 20 00 
1610   E413             
1611   E413             WinTxt:
1612   E413 20 59 6F 75  .db " You Win ",0
1612   E417 20 57 69 6E 
1612   E41B 20 00 
1613   E41D             
1614   E41D             PauseTxt:
1615   E41D 2A 20 50 41  .db "* PAUSE *",0
1615   E421 55 53 45 20 
1615   E425 2A 00 
1616   E427             
1617   E427             WaitTxt:
1618   E427 2A 20 57 41  .db "* WAITING *",0
1618   E42B 49 54 49 4E 
1618   E42F 47 20 2A 00 
1619   E433             
1620   E433             EnterText:
1621   E433 59 6F 75 20  .db "You entered the hiscore table!",0
1621   E437 65 6E 74 65 
1621   E43B 72 65 64 20 
1621   E43F 74 68 65 20 
1621   E443 68 69 73 63 
1621   E447 6F 72 65 20 
1621   E44B 74 61 62 6C 
1621   E44F 65 21 00 
1622   E452 45 6E 74 65  .db "Enter your name:",0
1622   E456 72 20 79 6F 
1622   E45A 75 72 20 6E 
1622   E45E 61 6D 65 3A 
1622   E462 00 
1623   E463             
1624   E463             HighTxt:
1625   E463 48 69 67 68  .db "High",0
1625   E467 00 
1626   E468             
1627   E468             SLTxt:
1628   E468 53 65 6E 64  .db "Send 2-4 lines",0
1628   E46C 20 32 2D 34 
1628   E470 20 6C 69 6E 
1628   E474 65 73 00 
1629   E477             NLTxt:
1630   E477 32 2D 34 00  .db "2-4",0
1631   E47B 31 2D 33 00  .db "1-3",0
1632   E47F             ScrambleTxt:
1633   E47F 75 6E 73 63  .db "unscrambled",0
1633   E483 72 61 6D 62 
1633   E487 6C 65 64 00 
1634   E48B 73 63 72 61  .db "scrambled  ",0
1634   E48F 6D 62 6C 65 
1634   E493 64 20 20 00 
1635   E497             
1636   E497             Letters:
1637   E497 19 21 0A 12  .db $19,$21,$0A,$12,$1A,$22,$0B,$13,$1B,$23,$2B
1637   E49B 1A 22 0B 13 
1637   E49F 1B 23 2B 
1638   E4A2 0C 14 1C 24  .db $0C,$14,$1C,$24,$2C,$0D,$15,$1D,$25,$2D,$0E
1638   E4A6 2C 0D 15 1D 
1638   E4AA 25 2D 0E 
1639   E4AD 16 1E 26 2E  .db $16,$1E,$26,$2E
1640   E4B1             
1641   E4B1             ZTet:
1642   E4B1 3F C0 00 00  .db %00111111,%11000000,%00000000,%00000000,%00000000
1642   E4B5 00 
1643   E4B6 3F C0 00 00  .db %00111111,%11000000,%00000000,%00000000,%00000000
1643   E4BA 00 
1644   E4BB 21 80 00 00  .db %00100001,%10000000,%00000000,%00000000,%00000000
1644   E4BF 00 
1645   E4C0 23 00 00 00  .db %00100011,%00000000,%00000000,%00000000,%00000000
1645   E4C4 00 
1646   E4C5 06 1D BB 2C  .db %00000110,%00011101,%10111011,%00101100,%00100011
1646   E4C9 23 
1647   E4CA 0C 55 2A A8  .db %00001100,%01010101,%00101010,%10101000,%01010100
1647   E4CE 54 
1648   E4CF 18 45 8B 2E  .db %00011000,%01000101,%10001011,%00101110,%00100110
1648   E4D3 26 
1649   E4D4 3F C5 0A A2  .db %00111111,%11000101,%00001010,%10100010,%01010101
1649   E4D8 55 
1650   E4D9 3F C5 CA AE  .db %00111111,%11000101,%11001010,%10101110,%00100010
1650   E4DD 22 
1651   E4DE             
1652   E4DE             .end
tasm: Number of errors = 82
